// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cipher

import (
	"sync"
)

// Ensure, that CipherMock does implement Cipher.
// If this is not the case, regenerate this file with moq.
var _ Cipher = &CipherMock{}

// CipherMock is a mock implementation of Cipher.
//
//	func TestSomethingThatUsesCipher(t *testing.T) {
//
//		// make and configure a mocked Cipher
//		mockedCipher := &CipherMock{
//			DecryptFunc: func(ciphertext []byte) ([]byte, error) {
//				panic("mock out the Decrypt method")
//			},
//			EncryptFunc: func(plaintext []byte) ([]byte, error) {
//				panic("mock out the Encrypt method")
//			},
//		}
//
//		// use mockedCipher in code that requires Cipher
//		// and then make assertions.
//
//	}
type CipherMock struct {
	// DecryptFunc mocks the Decrypt method.
	DecryptFunc func(ciphertext []byte) ([]byte, error)

	// EncryptFunc mocks the Encrypt method.
	EncryptFunc func(plaintext []byte) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Decrypt holds details about calls to the Decrypt method.
		Decrypt []struct {
			// Ciphertext is the ciphertext argument value.
			Ciphertext []byte
		}
		// Encrypt holds details about calls to the Encrypt method.
		Encrypt []struct {
			// Plaintext is the plaintext argument value.
			Plaintext []byte
		}
	}
	lockDecrypt sync.RWMutex
	lockEncrypt sync.RWMutex
}

// Decrypt calls DecryptFunc.
func (mock *CipherMock) Decrypt(ciphertext []byte) ([]byte, error) {
	if mock.DecryptFunc == nil {
		panic("CipherMock.DecryptFunc: method is nil but Cipher.Decrypt was just called")
	}
	callInfo := struct {
		Ciphertext []byte
	}{
		Ciphertext: ciphertext,
	}
	mock.lockDecrypt.Lock()
	mock.calls.Decrypt = append(mock.calls.Decrypt, callInfo)
	mock.lockDecrypt.Unlock()
	return mock.DecryptFunc(ciphertext)
}

// DecryptCalls gets all the calls that were made to Decrypt.
// Check the length with:
//
//	len(mockedCipher.DecryptCalls())
func (mock *CipherMock) DecryptCalls() []struct {
	Ciphertext []byte
} {
	var calls []struct {
		Ciphertext []byte
	}
	mock.lockDecrypt.RLock()
	calls = mock.calls.Decrypt
	mock.lockDecrypt.RUnlock()
	return calls
}

// Encrypt calls EncryptFunc.
func (mock *CipherMock) Encrypt(plaintext []byte) ([]byte, error) {
	if mock.EncryptFunc == nil {
		panic("CipherMock.EncryptFunc: method is nil but Cipher.Encrypt was just called")
	}
	callInfo := struct {
		Plaintext []byte
	}{
		Plaintext: plaintext,
	}
	mock.lockEncrypt.Lock()
	mock.calls.Encrypt = append(mock.calls.Encrypt, callInfo)
	mock.lockEncrypt.Unlock()
	return mock.EncryptFunc(plaintext)
}

// EncryptCalls gets all the calls that were made to Encrypt.
// Check the length with:
//
//	len(mockedCipher.EncryptCalls())
func (mock *CipherMock) EncryptCalls() []struct {
	Plaintext []byte
} {
	var calls []struct {
		Plaintext []byte
	}
	mock.lockEncrypt.RLock()
	calls = mock.calls.Encrypt
	mock.lockEncrypt.RUnlock()
	return calls
}
