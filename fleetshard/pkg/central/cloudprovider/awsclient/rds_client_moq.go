// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package awsclient

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"sync"
)

// Ensure, that RDSClientMock does implement RDSClient.
// If this is not the case, regenerate this file with moq.
var _ RDSClient = &RDSClientMock{}

// RDSClientMock is a mock implementation of RDSClient.
//
//	func TestSomethingThatUsesRDSClient(t *testing.T) {
//
//		// make and configure a mocked RDSClient
//		mockedRDSClient := &RDSClientMock{
//			CreateDBClusterFunc: func(ctx context.Context, params *rds.CreateDBClusterInput, optFns ...func(*rds.Options)) (*rds.CreateDBClusterOutput, error) {
//				panic("mock out the CreateDBCluster method")
//			},
//			CreateDBInstanceFunc: func(ctx context.Context, params *rds.CreateDBInstanceInput, optFns ...func(*rds.Options)) (*rds.CreateDBInstanceOutput, error) {
//				panic("mock out the CreateDBInstance method")
//			},
//			DeleteDBClusterFunc: func(ctx context.Context, params *rds.DeleteDBClusterInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterOutput, error) {
//				panic("mock out the DeleteDBCluster method")
//			},
//			DeleteDBClusterSnapshotFunc: func(ctx context.Context, params *rds.DeleteDBClusterSnapshotInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterSnapshotOutput, error) {
//				panic("mock out the DeleteDBClusterSnapshot method")
//			},
//			DeleteDBInstanceFunc: func(ctx context.Context, params *rds.DeleteDBInstanceInput, optFns ...func(*rds.Options)) (*rds.DeleteDBInstanceOutput, error) {
//				panic("mock out the DeleteDBInstance method")
//			},
//			DescribeAccountAttributesFunc: func(ctx context.Context, params *rds.DescribeAccountAttributesInput, optFns ...func(*rds.Options)) (*rds.DescribeAccountAttributesOutput, error) {
//				panic("mock out the DescribeAccountAttributes method")
//			},
//			DescribeDBClusterSnapshotsFunc: func(ctx context.Context, params *rds.DescribeDBClusterSnapshotsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterSnapshotsOutput, error) {
//				panic("mock out the DescribeDBClusterSnapshots method")
//			},
//			DescribeDBClustersFunc: func(ctx context.Context, params *rds.DescribeDBClustersInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClustersOutput, error) {
//				panic("mock out the DescribeDBClusters method")
//			},
//			DescribeDBInstancesFunc: func(ctx context.Context, params *rds.DescribeDBInstancesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error) {
//				panic("mock out the DescribeDBInstances method")
//			},
//			RestoreDBClusterFromSnapshotFunc: func(ctx context.Context, params *rds.RestoreDBClusterFromSnapshotInput, optFns ...func(*rds.Options)) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
//				panic("mock out the RestoreDBClusterFromSnapshot method")
//			},
//		}
//
//		// use mockedRDSClient in code that requires RDSClient
//		// and then make assertions.
//
//	}
type RDSClientMock struct {
	// CreateDBClusterFunc mocks the CreateDBCluster method.
	CreateDBClusterFunc func(ctx context.Context, params *rds.CreateDBClusterInput, optFns ...func(*rds.Options)) (*rds.CreateDBClusterOutput, error)

	// CreateDBInstanceFunc mocks the CreateDBInstance method.
	CreateDBInstanceFunc func(ctx context.Context, params *rds.CreateDBInstanceInput, optFns ...func(*rds.Options)) (*rds.CreateDBInstanceOutput, error)

	// DeleteDBClusterFunc mocks the DeleteDBCluster method.
	DeleteDBClusterFunc func(ctx context.Context, params *rds.DeleteDBClusterInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterOutput, error)

	// DeleteDBClusterSnapshotFunc mocks the DeleteDBClusterSnapshot method.
	DeleteDBClusterSnapshotFunc func(ctx context.Context, params *rds.DeleteDBClusterSnapshotInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterSnapshotOutput, error)

	// DeleteDBInstanceFunc mocks the DeleteDBInstance method.
	DeleteDBInstanceFunc func(ctx context.Context, params *rds.DeleteDBInstanceInput, optFns ...func(*rds.Options)) (*rds.DeleteDBInstanceOutput, error)

	// DescribeAccountAttributesFunc mocks the DescribeAccountAttributes method.
	DescribeAccountAttributesFunc func(ctx context.Context, params *rds.DescribeAccountAttributesInput, optFns ...func(*rds.Options)) (*rds.DescribeAccountAttributesOutput, error)

	// DescribeDBClusterSnapshotsFunc mocks the DescribeDBClusterSnapshots method.
	DescribeDBClusterSnapshotsFunc func(ctx context.Context, params *rds.DescribeDBClusterSnapshotsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterSnapshotsOutput, error)

	// DescribeDBClustersFunc mocks the DescribeDBClusters method.
	DescribeDBClustersFunc func(ctx context.Context, params *rds.DescribeDBClustersInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClustersOutput, error)

	// DescribeDBInstancesFunc mocks the DescribeDBInstances method.
	DescribeDBInstancesFunc func(ctx context.Context, params *rds.DescribeDBInstancesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error)

	// RestoreDBClusterFromSnapshotFunc mocks the RestoreDBClusterFromSnapshot method.
	RestoreDBClusterFromSnapshotFunc func(ctx context.Context, params *rds.RestoreDBClusterFromSnapshotInput, optFns ...func(*rds.Options)) (*rds.RestoreDBClusterFromSnapshotOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateDBCluster holds details about calls to the CreateDBCluster method.
		CreateDBCluster []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.CreateDBClusterInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
		// CreateDBInstance holds details about calls to the CreateDBInstance method.
		CreateDBInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.CreateDBInstanceInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
		// DeleteDBCluster holds details about calls to the DeleteDBCluster method.
		DeleteDBCluster []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.DeleteDBClusterInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
		// DeleteDBClusterSnapshot holds details about calls to the DeleteDBClusterSnapshot method.
		DeleteDBClusterSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.DeleteDBClusterSnapshotInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
		// DeleteDBInstance holds details about calls to the DeleteDBInstance method.
		DeleteDBInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.DeleteDBInstanceInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
		// DescribeAccountAttributes holds details about calls to the DescribeAccountAttributes method.
		DescribeAccountAttributes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.DescribeAccountAttributesInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
		// DescribeDBClusterSnapshots holds details about calls to the DescribeDBClusterSnapshots method.
		DescribeDBClusterSnapshots []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.DescribeDBClusterSnapshotsInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
		// DescribeDBClusters holds details about calls to the DescribeDBClusters method.
		DescribeDBClusters []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.DescribeDBClustersInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
		// DescribeDBInstances holds details about calls to the DescribeDBInstances method.
		DescribeDBInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.DescribeDBInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
		// RestoreDBClusterFromSnapshot holds details about calls to the RestoreDBClusterFromSnapshot method.
		RestoreDBClusterFromSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *rds.RestoreDBClusterFromSnapshotInput
			// OptFns is the optFns argument value.
			OptFns []func(*rds.Options)
		}
	}
	lockCreateDBCluster              sync.RWMutex
	lockCreateDBInstance             sync.RWMutex
	lockDeleteDBCluster              sync.RWMutex
	lockDeleteDBClusterSnapshot      sync.RWMutex
	lockDeleteDBInstance             sync.RWMutex
	lockDescribeAccountAttributes    sync.RWMutex
	lockDescribeDBClusterSnapshots   sync.RWMutex
	lockDescribeDBClusters           sync.RWMutex
	lockDescribeDBInstances          sync.RWMutex
	lockRestoreDBClusterFromSnapshot sync.RWMutex
}

// CreateDBCluster calls CreateDBClusterFunc.
func (mock *RDSClientMock) CreateDBCluster(ctx context.Context, params *rds.CreateDBClusterInput, optFns ...func(*rds.Options)) (*rds.CreateDBClusterOutput, error) {
	if mock.CreateDBClusterFunc == nil {
		panic("RDSClientMock.CreateDBClusterFunc: method is nil but RDSClient.CreateDBCluster was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.CreateDBClusterInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateDBCluster.Lock()
	mock.calls.CreateDBCluster = append(mock.calls.CreateDBCluster, callInfo)
	mock.lockCreateDBCluster.Unlock()
	return mock.CreateDBClusterFunc(ctx, params, optFns...)
}

// CreateDBClusterCalls gets all the calls that were made to CreateDBCluster.
// Check the length with:
//
//	len(mockedRDSClient.CreateDBClusterCalls())
func (mock *RDSClientMock) CreateDBClusterCalls() []struct {
	Ctx    context.Context
	Params *rds.CreateDBClusterInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.CreateDBClusterInput
		OptFns []func(*rds.Options)
	}
	mock.lockCreateDBCluster.RLock()
	calls = mock.calls.CreateDBCluster
	mock.lockCreateDBCluster.RUnlock()
	return calls
}

// CreateDBInstance calls CreateDBInstanceFunc.
func (mock *RDSClientMock) CreateDBInstance(ctx context.Context, params *rds.CreateDBInstanceInput, optFns ...func(*rds.Options)) (*rds.CreateDBInstanceOutput, error) {
	if mock.CreateDBInstanceFunc == nil {
		panic("RDSClientMock.CreateDBInstanceFunc: method is nil but RDSClient.CreateDBInstance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.CreateDBInstanceInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateDBInstance.Lock()
	mock.calls.CreateDBInstance = append(mock.calls.CreateDBInstance, callInfo)
	mock.lockCreateDBInstance.Unlock()
	return mock.CreateDBInstanceFunc(ctx, params, optFns...)
}

// CreateDBInstanceCalls gets all the calls that were made to CreateDBInstance.
// Check the length with:
//
//	len(mockedRDSClient.CreateDBInstanceCalls())
func (mock *RDSClientMock) CreateDBInstanceCalls() []struct {
	Ctx    context.Context
	Params *rds.CreateDBInstanceInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.CreateDBInstanceInput
		OptFns []func(*rds.Options)
	}
	mock.lockCreateDBInstance.RLock()
	calls = mock.calls.CreateDBInstance
	mock.lockCreateDBInstance.RUnlock()
	return calls
}

// DeleteDBCluster calls DeleteDBClusterFunc.
func (mock *RDSClientMock) DeleteDBCluster(ctx context.Context, params *rds.DeleteDBClusterInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterOutput, error) {
	if mock.DeleteDBClusterFunc == nil {
		panic("RDSClientMock.DeleteDBClusterFunc: method is nil but RDSClient.DeleteDBCluster was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.DeleteDBClusterInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteDBCluster.Lock()
	mock.calls.DeleteDBCluster = append(mock.calls.DeleteDBCluster, callInfo)
	mock.lockDeleteDBCluster.Unlock()
	return mock.DeleteDBClusterFunc(ctx, params, optFns...)
}

// DeleteDBClusterCalls gets all the calls that were made to DeleteDBCluster.
// Check the length with:
//
//	len(mockedRDSClient.DeleteDBClusterCalls())
func (mock *RDSClientMock) DeleteDBClusterCalls() []struct {
	Ctx    context.Context
	Params *rds.DeleteDBClusterInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.DeleteDBClusterInput
		OptFns []func(*rds.Options)
	}
	mock.lockDeleteDBCluster.RLock()
	calls = mock.calls.DeleteDBCluster
	mock.lockDeleteDBCluster.RUnlock()
	return calls
}

// DeleteDBClusterSnapshot calls DeleteDBClusterSnapshotFunc.
func (mock *RDSClientMock) DeleteDBClusterSnapshot(ctx context.Context, params *rds.DeleteDBClusterSnapshotInput, optFns ...func(*rds.Options)) (*rds.DeleteDBClusterSnapshotOutput, error) {
	if mock.DeleteDBClusterSnapshotFunc == nil {
		panic("RDSClientMock.DeleteDBClusterSnapshotFunc: method is nil but RDSClient.DeleteDBClusterSnapshot was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.DeleteDBClusterSnapshotInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteDBClusterSnapshot.Lock()
	mock.calls.DeleteDBClusterSnapshot = append(mock.calls.DeleteDBClusterSnapshot, callInfo)
	mock.lockDeleteDBClusterSnapshot.Unlock()
	return mock.DeleteDBClusterSnapshotFunc(ctx, params, optFns...)
}

// DeleteDBClusterSnapshotCalls gets all the calls that were made to DeleteDBClusterSnapshot.
// Check the length with:
//
//	len(mockedRDSClient.DeleteDBClusterSnapshotCalls())
func (mock *RDSClientMock) DeleteDBClusterSnapshotCalls() []struct {
	Ctx    context.Context
	Params *rds.DeleteDBClusterSnapshotInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.DeleteDBClusterSnapshotInput
		OptFns []func(*rds.Options)
	}
	mock.lockDeleteDBClusterSnapshot.RLock()
	calls = mock.calls.DeleteDBClusterSnapshot
	mock.lockDeleteDBClusterSnapshot.RUnlock()
	return calls
}

// DeleteDBInstance calls DeleteDBInstanceFunc.
func (mock *RDSClientMock) DeleteDBInstance(ctx context.Context, params *rds.DeleteDBInstanceInput, optFns ...func(*rds.Options)) (*rds.DeleteDBInstanceOutput, error) {
	if mock.DeleteDBInstanceFunc == nil {
		panic("RDSClientMock.DeleteDBInstanceFunc: method is nil but RDSClient.DeleteDBInstance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.DeleteDBInstanceInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteDBInstance.Lock()
	mock.calls.DeleteDBInstance = append(mock.calls.DeleteDBInstance, callInfo)
	mock.lockDeleteDBInstance.Unlock()
	return mock.DeleteDBInstanceFunc(ctx, params, optFns...)
}

// DeleteDBInstanceCalls gets all the calls that were made to DeleteDBInstance.
// Check the length with:
//
//	len(mockedRDSClient.DeleteDBInstanceCalls())
func (mock *RDSClientMock) DeleteDBInstanceCalls() []struct {
	Ctx    context.Context
	Params *rds.DeleteDBInstanceInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.DeleteDBInstanceInput
		OptFns []func(*rds.Options)
	}
	mock.lockDeleteDBInstance.RLock()
	calls = mock.calls.DeleteDBInstance
	mock.lockDeleteDBInstance.RUnlock()
	return calls
}

// DescribeAccountAttributes calls DescribeAccountAttributesFunc.
func (mock *RDSClientMock) DescribeAccountAttributes(ctx context.Context, params *rds.DescribeAccountAttributesInput, optFns ...func(*rds.Options)) (*rds.DescribeAccountAttributesOutput, error) {
	if mock.DescribeAccountAttributesFunc == nil {
		panic("RDSClientMock.DescribeAccountAttributesFunc: method is nil but RDSClient.DescribeAccountAttributes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.DescribeAccountAttributesInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeAccountAttributes.Lock()
	mock.calls.DescribeAccountAttributes = append(mock.calls.DescribeAccountAttributes, callInfo)
	mock.lockDescribeAccountAttributes.Unlock()
	return mock.DescribeAccountAttributesFunc(ctx, params, optFns...)
}

// DescribeAccountAttributesCalls gets all the calls that were made to DescribeAccountAttributes.
// Check the length with:
//
//	len(mockedRDSClient.DescribeAccountAttributesCalls())
func (mock *RDSClientMock) DescribeAccountAttributesCalls() []struct {
	Ctx    context.Context
	Params *rds.DescribeAccountAttributesInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.DescribeAccountAttributesInput
		OptFns []func(*rds.Options)
	}
	mock.lockDescribeAccountAttributes.RLock()
	calls = mock.calls.DescribeAccountAttributes
	mock.lockDescribeAccountAttributes.RUnlock()
	return calls
}

// DescribeDBClusterSnapshots calls DescribeDBClusterSnapshotsFunc.
func (mock *RDSClientMock) DescribeDBClusterSnapshots(ctx context.Context, params *rds.DescribeDBClusterSnapshotsInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	if mock.DescribeDBClusterSnapshotsFunc == nil {
		panic("RDSClientMock.DescribeDBClusterSnapshotsFunc: method is nil but RDSClient.DescribeDBClusterSnapshots was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.DescribeDBClusterSnapshotsInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeDBClusterSnapshots.Lock()
	mock.calls.DescribeDBClusterSnapshots = append(mock.calls.DescribeDBClusterSnapshots, callInfo)
	mock.lockDescribeDBClusterSnapshots.Unlock()
	return mock.DescribeDBClusterSnapshotsFunc(ctx, params, optFns...)
}

// DescribeDBClusterSnapshotsCalls gets all the calls that were made to DescribeDBClusterSnapshots.
// Check the length with:
//
//	len(mockedRDSClient.DescribeDBClusterSnapshotsCalls())
func (mock *RDSClientMock) DescribeDBClusterSnapshotsCalls() []struct {
	Ctx    context.Context
	Params *rds.DescribeDBClusterSnapshotsInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.DescribeDBClusterSnapshotsInput
		OptFns []func(*rds.Options)
	}
	mock.lockDescribeDBClusterSnapshots.RLock()
	calls = mock.calls.DescribeDBClusterSnapshots
	mock.lockDescribeDBClusterSnapshots.RUnlock()
	return calls
}

// DescribeDBClusters calls DescribeDBClustersFunc.
func (mock *RDSClientMock) DescribeDBClusters(ctx context.Context, params *rds.DescribeDBClustersInput, optFns ...func(*rds.Options)) (*rds.DescribeDBClustersOutput, error) {
	if mock.DescribeDBClustersFunc == nil {
		panic("RDSClientMock.DescribeDBClustersFunc: method is nil but RDSClient.DescribeDBClusters was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.DescribeDBClustersInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeDBClusters.Lock()
	mock.calls.DescribeDBClusters = append(mock.calls.DescribeDBClusters, callInfo)
	mock.lockDescribeDBClusters.Unlock()
	return mock.DescribeDBClustersFunc(ctx, params, optFns...)
}

// DescribeDBClustersCalls gets all the calls that were made to DescribeDBClusters.
// Check the length with:
//
//	len(mockedRDSClient.DescribeDBClustersCalls())
func (mock *RDSClientMock) DescribeDBClustersCalls() []struct {
	Ctx    context.Context
	Params *rds.DescribeDBClustersInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.DescribeDBClustersInput
		OptFns []func(*rds.Options)
	}
	mock.lockDescribeDBClusters.RLock()
	calls = mock.calls.DescribeDBClusters
	mock.lockDescribeDBClusters.RUnlock()
	return calls
}

// DescribeDBInstances calls DescribeDBInstancesFunc.
func (mock *RDSClientMock) DescribeDBInstances(ctx context.Context, params *rds.DescribeDBInstancesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error) {
	if mock.DescribeDBInstancesFunc == nil {
		panic("RDSClientMock.DescribeDBInstancesFunc: method is nil but RDSClient.DescribeDBInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.DescribeDBInstancesInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeDBInstances.Lock()
	mock.calls.DescribeDBInstances = append(mock.calls.DescribeDBInstances, callInfo)
	mock.lockDescribeDBInstances.Unlock()
	return mock.DescribeDBInstancesFunc(ctx, params, optFns...)
}

// DescribeDBInstancesCalls gets all the calls that were made to DescribeDBInstances.
// Check the length with:
//
//	len(mockedRDSClient.DescribeDBInstancesCalls())
func (mock *RDSClientMock) DescribeDBInstancesCalls() []struct {
	Ctx    context.Context
	Params *rds.DescribeDBInstancesInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.DescribeDBInstancesInput
		OptFns []func(*rds.Options)
	}
	mock.lockDescribeDBInstances.RLock()
	calls = mock.calls.DescribeDBInstances
	mock.lockDescribeDBInstances.RUnlock()
	return calls
}

// RestoreDBClusterFromSnapshot calls RestoreDBClusterFromSnapshotFunc.
func (mock *RDSClientMock) RestoreDBClusterFromSnapshot(ctx context.Context, params *rds.RestoreDBClusterFromSnapshotInput, optFns ...func(*rds.Options)) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	if mock.RestoreDBClusterFromSnapshotFunc == nil {
		panic("RDSClientMock.RestoreDBClusterFromSnapshotFunc: method is nil but RDSClient.RestoreDBClusterFromSnapshot was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *rds.RestoreDBClusterFromSnapshotInput
		OptFns []func(*rds.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRestoreDBClusterFromSnapshot.Lock()
	mock.calls.RestoreDBClusterFromSnapshot = append(mock.calls.RestoreDBClusterFromSnapshot, callInfo)
	mock.lockRestoreDBClusterFromSnapshot.Unlock()
	return mock.RestoreDBClusterFromSnapshotFunc(ctx, params, optFns...)
}

// RestoreDBClusterFromSnapshotCalls gets all the calls that were made to RestoreDBClusterFromSnapshot.
// Check the length with:
//
//	len(mockedRDSClient.RestoreDBClusterFromSnapshotCalls())
func (mock *RDSClientMock) RestoreDBClusterFromSnapshotCalls() []struct {
	Ctx    context.Context
	Params *rds.RestoreDBClusterFromSnapshotInput
	OptFns []func(*rds.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *rds.RestoreDBClusterFromSnapshotInput
		OptFns []func(*rds.Options)
	}
	mock.lockRestoreDBClusterFromSnapshot.RLock()
	calls = mock.calls.RestoreDBClusterFromSnapshot
	mock.lockRestoreDBClusterFromSnapshot.RUnlock()
	return calls
}
