// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"sync"
)

// Ensure, that TelemetryAuthMock does implement TelemetryAuth.
// If this is not the case, regenerate this file with moq.
var _ TelemetryAuth = &TelemetryAuthMock{}

// TelemetryAuthMock is a mock implementation of TelemetryAuth.
//
//	func TestSomethingThatUsesTelemetryAuth(t *testing.T) {
//
//		// make and configure a mocked TelemetryAuth
//		mockedTelemetryAuth := &TelemetryAuthMock{
//			getUserFromContextFunc: func(ctx context.Context) (string, error) {
//				panic("mock out the getUserFromContext method")
//			},
//		}
//
//		// use mockedTelemetryAuth in code that requires TelemetryAuth
//		// and then make assertions.
//
//	}
type TelemetryAuthMock struct {
	// getUserFromContextFunc mocks the getUserFromContext method.
	getUserFromContextFunc func(ctx context.Context) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// getUserFromContext holds details about calls to the getUserFromContext method.
		getUserFromContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockgetUserFromContext sync.RWMutex
}

// getUserFromContext calls getUserFromContextFunc.
func (mock *TelemetryAuthMock) getUserFromContext(ctx context.Context) (string, error) {
	if mock.getUserFromContextFunc == nil {
		panic("TelemetryAuthMock.getUserFromContextFunc: method is nil but TelemetryAuth.getUserFromContext was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockgetUserFromContext.Lock()
	mock.calls.getUserFromContext = append(mock.calls.getUserFromContext, callInfo)
	mock.lockgetUserFromContext.Unlock()
	return mock.getUserFromContextFunc(ctx)
}

// getUserFromContextCalls gets all the calls that were made to getUserFromContext.
// Check the length with:
//
//	len(mockedTelemetryAuth.getUserFromContextCalls())
func (mock *TelemetryAuthMock) getUserFromContextCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockgetUserFromContext.RLock()
	calls = mock.calls.getUserFromContext
	mock.lockgetUserFromContext.RUnlock()
	return calls
}
