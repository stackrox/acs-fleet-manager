// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/stackrox/acs-fleet-manager/pkg/client/observatorium"
	serviceError "github.com/stackrox/acs-fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that ObservatoriumServiceMock does implement ObservatoriumService.
// If this is not the case, regenerate this file with moq.
var _ ObservatoriumService = &ObservatoriumServiceMock{}

// ObservatoriumServiceMock is a mock implementation of ObservatoriumService.
//
//	func TestSomethingThatUsesObservatoriumService(t *testing.T) {
//
//		// make and configure a mocked ObservatoriumService
//		mockedObservatoriumService := &ObservatoriumServiceMock{
//			GetDinosaurStateFunc: func(name string, namespaceName string) (observatorium.DinosaurState, error) {
//				panic("mock out the GetDinosaurState method")
//			},
//			GetMetricsByDinosaurIDFunc: func(ctx context.Context, csMetrics *observatorium.DinosaurMetrics, id string, query observatorium.MetricsReqParams) (string, *serviceError.ServiceError) {
//				panic("mock out the GetMetricsByDinosaurID method")
//			},
//		}
//
//		// use mockedObservatoriumService in code that requires ObservatoriumService
//		// and then make assertions.
//
//	}
type ObservatoriumServiceMock struct {
	// GetDinosaurStateFunc mocks the GetDinosaurState method.
	GetDinosaurStateFunc func(name string, namespaceName string) (observatorium.DinosaurState, error)

	// GetMetricsByDinosaurIDFunc mocks the GetMetricsByDinosaurID method.
	GetMetricsByDinosaurIDFunc func(ctx context.Context, csMetrics *observatorium.DinosaurMetrics, id string, query observatorium.MetricsReqParams) (string, *serviceError.ServiceError)

	// calls tracks calls to the methods.
	calls struct {
		// GetDinosaurState holds details about calls to the GetDinosaurState method.
		GetDinosaurState []struct {
			// Name is the name argument value.
			Name string
			// NamespaceName is the namespaceName argument value.
			NamespaceName string
		}
		// GetMetricsByDinosaurID holds details about calls to the GetMetricsByDinosaurID method.
		GetMetricsByDinosaurID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CsMetrics is the csMetrics argument value.
			CsMetrics *observatorium.DinosaurMetrics
			// ID is the id argument value.
			ID string
			// Query is the query argument value.
			Query observatorium.MetricsReqParams
		}
	}
	lockGetDinosaurState       sync.RWMutex
	lockGetMetricsByDinosaurID sync.RWMutex
}

// GetDinosaurState calls GetDinosaurStateFunc.
func (mock *ObservatoriumServiceMock) GetDinosaurState(name string, namespaceName string) (observatorium.DinosaurState, error) {
	if mock.GetDinosaurStateFunc == nil {
		panic("ObservatoriumServiceMock.GetDinosaurStateFunc: method is nil but ObservatoriumService.GetDinosaurState was just called")
	}
	callInfo := struct {
		Name          string
		NamespaceName string
	}{
		Name:          name,
		NamespaceName: namespaceName,
	}
	mock.lockGetDinosaurState.Lock()
	mock.calls.GetDinosaurState = append(mock.calls.GetDinosaurState, callInfo)
	mock.lockGetDinosaurState.Unlock()
	return mock.GetDinosaurStateFunc(name, namespaceName)
}

// GetDinosaurStateCalls gets all the calls that were made to GetDinosaurState.
// Check the length with:
//
//	len(mockedObservatoriumService.GetDinosaurStateCalls())
func (mock *ObservatoriumServiceMock) GetDinosaurStateCalls() []struct {
	Name          string
	NamespaceName string
} {
	var calls []struct {
		Name          string
		NamespaceName string
	}
	mock.lockGetDinosaurState.RLock()
	calls = mock.calls.GetDinosaurState
	mock.lockGetDinosaurState.RUnlock()
	return calls
}

// GetMetricsByDinosaurID calls GetMetricsByDinosaurIDFunc.
func (mock *ObservatoriumServiceMock) GetMetricsByDinosaurID(ctx context.Context, csMetrics *observatorium.DinosaurMetrics, id string, query observatorium.MetricsReqParams) (string, *serviceError.ServiceError) {
	if mock.GetMetricsByDinosaurIDFunc == nil {
		panic("ObservatoriumServiceMock.GetMetricsByDinosaurIDFunc: method is nil but ObservatoriumService.GetMetricsByDinosaurID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		CsMetrics *observatorium.DinosaurMetrics
		ID        string
		Query     observatorium.MetricsReqParams
	}{
		Ctx:       ctx,
		CsMetrics: csMetrics,
		ID:        id,
		Query:     query,
	}
	mock.lockGetMetricsByDinosaurID.Lock()
	mock.calls.GetMetricsByDinosaurID = append(mock.calls.GetMetricsByDinosaurID, callInfo)
	mock.lockGetMetricsByDinosaurID.Unlock()
	return mock.GetMetricsByDinosaurIDFunc(ctx, csMetrics, id, query)
}

// GetMetricsByDinosaurIDCalls gets all the calls that were made to GetMetricsByDinosaurID.
// Check the length with:
//
//	len(mockedObservatoriumService.GetMetricsByDinosaurIDCalls())
func (mock *ObservatoriumServiceMock) GetMetricsByDinosaurIDCalls() []struct {
	Ctx       context.Context
	CsMetrics *observatorium.DinosaurMetrics
	ID        string
	Query     observatorium.MetricsReqParams
} {
	var calls []struct {
		Ctx       context.Context
		CsMetrics *observatorium.DinosaurMetrics
		ID        string
		Query     observatorium.MetricsReqParams
	}
	mock.lockGetMetricsByDinosaurID.RLock()
	calls = mock.calls.GetMetricsByDinosaurID
	mock.lockGetMetricsByDinosaurID.RUnlock()
	return calls
}
