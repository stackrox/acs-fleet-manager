// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"sync"
)

// Ensure, that CentralDefaultVersionServiceMock does implement CentralDefaultVersionService.
// If this is not the case, regenerate this file with moq.
var _ CentralDefaultVersionService = &CentralDefaultVersionServiceMock{}

// CentralDefaultVersionServiceMock is a mock implementation of CentralDefaultVersionService.
//
//	func TestSomethingThatUsesCentralDefaultVersionService(t *testing.T) {
//
//		// make and configure a mocked CentralDefaultVersionService
//		mockedCentralDefaultVersionService := &CentralDefaultVersionServiceMock{
//			GetDefaultVersionFunc: func() (string, error) {
//				panic("mock out the GetDefaultVersion method")
//			},
//			SetDefaultVersionFunc: func(s string) error {
//				panic("mock out the SetDefaultVersion method")
//			},
//			StartFunc: func()  {
//				panic("mock out the Start method")
//			},
//			StopFunc: func()  {
//				panic("mock out the Stop method")
//			},
//		}
//
//		// use mockedCentralDefaultVersionService in code that requires CentralDefaultVersionService
//		// and then make assertions.
//
//	}
type CentralDefaultVersionServiceMock struct {
	// GetDefaultVersionFunc mocks the GetDefaultVersion method.
	GetDefaultVersionFunc func() (string, error)

	// SetDefaultVersionFunc mocks the SetDefaultVersion method.
	SetDefaultVersionFunc func(s string) error

	// StartFunc mocks the Start method.
	StartFunc func()

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// GetDefaultVersion holds details about calls to the GetDefaultVersion method.
		GetDefaultVersion []struct {
		}
		// SetDefaultVersion holds details about calls to the SetDefaultVersion method.
		SetDefaultVersion []struct {
			// S is the s argument value.
			S string
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockGetDefaultVersion sync.RWMutex
	lockSetDefaultVersion sync.RWMutex
	lockStart             sync.RWMutex
	lockStop              sync.RWMutex
}

// GetDefaultVersion calls GetDefaultVersionFunc.
func (mock *CentralDefaultVersionServiceMock) GetDefaultVersion() (string, error) {
	if mock.GetDefaultVersionFunc == nil {
		panic("CentralDefaultVersionServiceMock.GetDefaultVersionFunc: method is nil but CentralDefaultVersionService.GetDefaultVersion was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDefaultVersion.Lock()
	mock.calls.GetDefaultVersion = append(mock.calls.GetDefaultVersion, callInfo)
	mock.lockGetDefaultVersion.Unlock()
	return mock.GetDefaultVersionFunc()
}

// GetDefaultVersionCalls gets all the calls that were made to GetDefaultVersion.
// Check the length with:
//
//	len(mockedCentralDefaultVersionService.GetDefaultVersionCalls())
func (mock *CentralDefaultVersionServiceMock) GetDefaultVersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDefaultVersion.RLock()
	calls = mock.calls.GetDefaultVersion
	mock.lockGetDefaultVersion.RUnlock()
	return calls
}

// SetDefaultVersion calls SetDefaultVersionFunc.
func (mock *CentralDefaultVersionServiceMock) SetDefaultVersion(s string) error {
	if mock.SetDefaultVersionFunc == nil {
		panic("CentralDefaultVersionServiceMock.SetDefaultVersionFunc: method is nil but CentralDefaultVersionService.SetDefaultVersion was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetDefaultVersion.Lock()
	mock.calls.SetDefaultVersion = append(mock.calls.SetDefaultVersion, callInfo)
	mock.lockSetDefaultVersion.Unlock()
	return mock.SetDefaultVersionFunc(s)
}

// SetDefaultVersionCalls gets all the calls that were made to SetDefaultVersion.
// Check the length with:
//
//	len(mockedCentralDefaultVersionService.SetDefaultVersionCalls())
func (mock *CentralDefaultVersionServiceMock) SetDefaultVersionCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetDefaultVersion.RLock()
	calls = mock.calls.SetDefaultVersion
	mock.lockSetDefaultVersion.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *CentralDefaultVersionServiceMock) Start() {
	if mock.StartFunc == nil {
		panic("CentralDefaultVersionServiceMock.StartFunc: method is nil but CentralDefaultVersionService.Start was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedCentralDefaultVersionService.StartCalls())
func (mock *CentralDefaultVersionServiceMock) StartCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *CentralDefaultVersionServiceMock) Stop() {
	if mock.StopFunc == nil {
		panic("CentralDefaultVersionServiceMock.StopFunc: method is nil but CentralDefaultVersionService.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//
//	len(mockedCentralDefaultVersionService.StopCalls())
func (mock *CentralDefaultVersionServiceMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}
