// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/stackrox/acs-fleet-manager/internal/dinosaur/pkg/api/dbapi"
	"github.com/stackrox/acs-fleet-manager/internal/dinosaur/pkg/dinosaurs/types"
	serviceError "github.com/stackrox/acs-fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that QuotaServiceMock does implement QuotaService.
// If this is not the case, regenerate this file with moq.
var _ QuotaService = &QuotaServiceMock{}

// QuotaServiceMock is a mock implementation of QuotaService.
//
//	func TestSomethingThatUsesQuotaService(t *testing.T) {
//
//		// make and configure a mocked QuotaService
//		mockedQuotaService := &QuotaServiceMock{
//			DeleteQuotaFunc: func(subscriptionID string) *serviceError.ServiceError {
//				panic("mock out the DeleteQuota method")
//			},
//			HasQuotaAllowanceFunc: func(dinosaur *dbapi.CentralRequest, instanceType types.DinosaurInstanceType) (bool, *serviceError.ServiceError) {
//				panic("mock out the HasQuotaAllowance method")
//			},
//			ReserveQuotaFunc: func(ctx context.Context, dinosaur *dbapi.CentralRequest, forcedBillingModel string, forcedProduct string) (string, *serviceError.ServiceError) {
//				panic("mock out the ReserveQuota method")
//			},
//		}
//
//		// use mockedQuotaService in code that requires QuotaService
//		// and then make assertions.
//
//	}
type QuotaServiceMock struct {
	// DeleteQuotaFunc mocks the DeleteQuota method.
	DeleteQuotaFunc func(subscriptionID string) *serviceError.ServiceError

	// HasQuotaAllowanceFunc mocks the HasQuotaAllowance method.
	HasQuotaAllowanceFunc func(dinosaur *dbapi.CentralRequest, instanceType types.DinosaurInstanceType) (bool, *serviceError.ServiceError)

	// ReserveQuotaFunc mocks the ReserveQuota method.
	ReserveQuotaFunc func(ctx context.Context, dinosaur *dbapi.CentralRequest, forcedBillingModel string, forcedProduct string) (string, *serviceError.ServiceError)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteQuota holds details about calls to the DeleteQuota method.
		DeleteQuota []struct {
			// SubscriptionID is the subscriptionID argument value.
			SubscriptionID string
		}
		// HasQuotaAllowance holds details about calls to the HasQuotaAllowance method.
		HasQuotaAllowance []struct {
			// Dinosaur is the dinosaur argument value.
			Dinosaur *dbapi.CentralRequest
			// InstanceType is the instanceType argument value.
			InstanceType types.DinosaurInstanceType
		}
		// ReserveQuota holds details about calls to the ReserveQuota method.
		ReserveQuota []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dinosaur is the dinosaur argument value.
			Dinosaur *dbapi.CentralRequest
			// ForcedBillingModel is the forcedBillingModel argument value.
			ForcedBillingModel string
			// ForcedProduct is the forcedProduct argument value.
			ForcedProduct string
		}
	}
	lockDeleteQuota       sync.RWMutex
	lockHasQuotaAllowance sync.RWMutex
	lockReserveQuota      sync.RWMutex
}

// DeleteQuota calls DeleteQuotaFunc.
func (mock *QuotaServiceMock) DeleteQuota(subscriptionID string) *serviceError.ServiceError {
	if mock.DeleteQuotaFunc == nil {
		panic("QuotaServiceMock.DeleteQuotaFunc: method is nil but QuotaService.DeleteQuota was just called")
	}
	callInfo := struct {
		SubscriptionID string
	}{
		SubscriptionID: subscriptionID,
	}
	mock.lockDeleteQuota.Lock()
	mock.calls.DeleteQuota = append(mock.calls.DeleteQuota, callInfo)
	mock.lockDeleteQuota.Unlock()
	return mock.DeleteQuotaFunc(subscriptionID)
}

// DeleteQuotaCalls gets all the calls that were made to DeleteQuota.
// Check the length with:
//
//	len(mockedQuotaService.DeleteQuotaCalls())
func (mock *QuotaServiceMock) DeleteQuotaCalls() []struct {
	SubscriptionID string
} {
	var calls []struct {
		SubscriptionID string
	}
	mock.lockDeleteQuota.RLock()
	calls = mock.calls.DeleteQuota
	mock.lockDeleteQuota.RUnlock()
	return calls
}

// HasQuotaAllowance calls HasQuotaAllowanceFunc.
func (mock *QuotaServiceMock) HasQuotaAllowance(dinosaur *dbapi.CentralRequest, instanceType types.DinosaurInstanceType) (bool, *serviceError.ServiceError) {
	if mock.HasQuotaAllowanceFunc == nil {
		panic("QuotaServiceMock.HasQuotaAllowanceFunc: method is nil but QuotaService.HasQuotaAllowance was just called")
	}
	callInfo := struct {
		Dinosaur     *dbapi.CentralRequest
		InstanceType types.DinosaurInstanceType
	}{
		Dinosaur:     dinosaur,
		InstanceType: instanceType,
	}
	mock.lockHasQuotaAllowance.Lock()
	mock.calls.HasQuotaAllowance = append(mock.calls.HasQuotaAllowance, callInfo)
	mock.lockHasQuotaAllowance.Unlock()
	return mock.HasQuotaAllowanceFunc(dinosaur, instanceType)
}

// HasQuotaAllowanceCalls gets all the calls that were made to HasQuotaAllowance.
// Check the length with:
//
//	len(mockedQuotaService.HasQuotaAllowanceCalls())
func (mock *QuotaServiceMock) HasQuotaAllowanceCalls() []struct {
	Dinosaur     *dbapi.CentralRequest
	InstanceType types.DinosaurInstanceType
} {
	var calls []struct {
		Dinosaur     *dbapi.CentralRequest
		InstanceType types.DinosaurInstanceType
	}
	mock.lockHasQuotaAllowance.RLock()
	calls = mock.calls.HasQuotaAllowance
	mock.lockHasQuotaAllowance.RUnlock()
	return calls
}

// ReserveQuota calls ReserveQuotaFunc.
func (mock *QuotaServiceMock) ReserveQuota(ctx context.Context, dinosaur *dbapi.CentralRequest, forcedBillingModel string, forcedProduct string) (string, *serviceError.ServiceError) {
	if mock.ReserveQuotaFunc == nil {
		panic("QuotaServiceMock.ReserveQuotaFunc: method is nil but QuotaService.ReserveQuota was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		Dinosaur           *dbapi.CentralRequest
		ForcedBillingModel string
		ForcedProduct      string
	}{
		Ctx:                ctx,
		Dinosaur:           dinosaur,
		ForcedBillingModel: forcedBillingModel,
		ForcedProduct:      forcedProduct,
	}
	mock.lockReserveQuota.Lock()
	mock.calls.ReserveQuota = append(mock.calls.ReserveQuota, callInfo)
	mock.lockReserveQuota.Unlock()
	return mock.ReserveQuotaFunc(ctx, dinosaur, forcedBillingModel, forcedProduct)
}

// ReserveQuotaCalls gets all the calls that were made to ReserveQuota.
// Check the length with:
//
//	len(mockedQuotaService.ReserveQuotaCalls())
func (mock *QuotaServiceMock) ReserveQuotaCalls() []struct {
	Ctx                context.Context
	Dinosaur           *dbapi.CentralRequest
	ForcedBillingModel string
	ForcedProduct      string
} {
	var calls []struct {
		Ctx                context.Context
		Dinosaur           *dbapi.CentralRequest
		ForcedBillingModel string
		ForcedProduct      string
	}
	mock.lockReserveQuota.RLock()
	calls = mock.calls.ReserveQuota
	mock.lockReserveQuota.RUnlock()
	return calls
}
