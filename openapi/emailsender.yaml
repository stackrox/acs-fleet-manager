openapi: 3.0.1
info:
  title: Red Hat Advanced Cluster Security Service Email Sender
  description: Red Hat Advanced Cluster Security (RHACS) Email Sender service allows sending email notification from ACS Central tenants without bringing an own SMTP service.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: localhost
  - url: /
    description: current domain
paths:

  /api/v1/acscsemail/errors/{id}:
    get:
      operationId: getErrorById
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Get error by Id
      summary: Returns the error by id
      tags:
        - errors
      parameters:
        - $ref: "#/components/parameters/id"

  /api/v1/acscsemail/errors:
    get:
      operationId: getErrors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorList"
          description: List of possible errors
      summary: Returns the list of possible API errors
      tags:
        - errors

  /api/v1/acscsemail:
    post:
      operationId: sendEmail
      description: Send email for provided tenant
      requestBody:
        description: Send email data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendEmailPayload"
            examples:
              SendEmailExample:
                $ref: "#/components/examples/SendEmailExample"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendEmailResponse"
              examples:
                SendEmailPostResponseExample:
                  $ref: "#/components/examples/SendEmailResponseExample"
          description: successfully sent an email
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                400CreationExample:
                  $ref: "#/components/examples/400MalformedRequest"
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                401Example:
                  $ref: "#/components/examples/401Example"
                401NoAuthorizationProvided:
                  $ref: "#/components/examples/401NoAuthorizationProvided"
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                403Example:
                  $ref: "#/components/examples/403Example"
                403UnauthorizedExample:
                  $ref: "#/components/examples/403UnauthorizedExample"
          description: User forbidden either because the user is not authorized to access the service
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                429Example:
                  $ref: "#/components/examples/429Example"
          description: Rate limit for the tenant exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                500Example:
                  $ref: "#/components/examples/500Example"
          description: Cannot send email
      security:
        - Bearer: []
      summary: Sends an email for tenant

components:
  schemas:
    ObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      required:
        - kind
        - page
        - size
        - total
        - items
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
    Error:
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            code:
              type: string
            reason:
              type: string
            operation_id:
              type: string
    ErrorList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Error"
    SendEmailResponse:
      type: object
      properties:
        status:
          type: string
      example:
            $ref: "#/components/examples/SendEmailResponseExample"
    SendEmailPayload:
      description: Schema for the request body sent to /acscsemail POST
      required:
        - to
        - rawMessage
      type: object
      properties:
        to:
          description: a list of recipients to recieve an email
          type: array
          items:
            type: string
        rawMessage:
          description: base64 encoded email content
          type: string

  parameters:
    id:
      name: id
      description: The ID of record
      schema:
        type: string
      in: path
      required: true
    page:
      name: page
      in: query
      description: Page index
      required: false
      schema:
        type: string
      examples:
        page:
          value: "1"
    size:
      name: size
      in: query
      description: Number of items in each page
      required: false
      schema:
        type: string
      examples:
        size:
          value: "100"
  securitySchemes:
    Bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  examples:
    SendEmailResponseExample:
      value:
        status: "sent"
    SendEmailExample:
      value:
        to: ["to@example.com", "to2@example.com"]
        rawMessage: "dGVzdCBtZXNzYWdlIGNvbnRlbnQ="
    400MalformedRequest:
      value:
        id: "23"
        kind: "Error"
        href: "/api/v1/acscsemail/errors/23"
        code: "ACSCS-EMAIL-23"
        reason: "failed to decode send email request payload"
        operation_id: "1lWDGuybIrEnxrAem724gqkkiDv"
    401Example:
      value:
        id: "11"
        kind: "Error"
        href: "/api/v1/acscsemail/errors/11"
        code: "ACSCS-EMAIL-11"
        reason: "Unable to verify JWT token: Required authorization token not found"
        operation_id: "1iY3UhEhwmXBpWPfI2lNekpd4ZD"
    401NoAuthorizationProvided:
      value:
        id: "15"
        kind: "Error"
        href: "/api/v1/acscsemail/errors/15"
        code: "ACSCS-EMAIL-15"
        reason: "Request doesn't contain the 'Authorization' header or the 'cs_jwt' cookie"
        operation_id: "1lY3UiEkxnXBpVPeI2oNejd3XB"
    403Example:
      value:
        id: "4"
        kind: "Error"
        href: "/api/v1/acscsemail/errors/4"
        code: "ACSCS-EMAIL-4"
        reason: "User 'foo-bar' is not authorized to access the service"
        operation_id: "1lY3UiEhznXBpWPfI2lNejpd4YC"
    403UnauthorizedExample:
      value:
        id: "11"
        kind: "Error"
        href: "/api/v1/acscsemail/errors/11"
        code: "ACSCS-EMAIL-11"
        reason: "Account is unauthorized to perform this action"
        operation_id: "kXCzWPeI2oXBpVPeI2LvF9jMQY"
    429Example:
      value:
        id: "429"
        kind: "Error"
        href: "/api/v1/acscsemail/errors/429"
        code: "ACSCS-EMAIL-429"
        reason: "rate limitted"
        operation_id: "1ieELvF9jMQY6YghfM9gGRsHvEW"
    500Example:
      value:
        id: "9"
        kind: "Error"
        href: "/api/v1/acscsemail/errors/9"
        code: "ACSCS-EMAIL-9"
        reason: "Unspecified error"
        operation_id: "1ieELvF9jMQY6YghfM9gGRsHvEW"
