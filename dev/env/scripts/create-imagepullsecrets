#!/usr/bin/env bash

## This script assembles ImagePullSecrets for quay.io and registry.redhat.io as Kubernetes manifests ready for applying them to a cluster.

GITROOT="$(git rev-parse --show-toplevel)"
# shellcheck source=/dev/null
source "${GITROOT}/dev/env/scripts/lib.sh"

print_pull_secret() {
    local name="$1"
    [[ -n "$name" ]] || die "Image pull secret name is empty"
    local registry_auth="$2"
    [[ -n "$registry_auth" ]] || die "Unable to create an image pull secret with name $name: .dockerconfigjson is empty"
    cat <<EOF
apiVersion: v1
data:
  .dockerconfigjson: ${registry_auth}
kind: Secret
metadata:
  name: $name
type: kubernetes.io/dockerconfigjson
EOF
}

redhat_registry_auth() {
    # Try to fetch an access token from ocm.
    local registry_auth
    registry_auth=$(ocm post /api/accounts_mgmt/v1/access_token <<< '' 2>/dev/null | jq '. | @base64')
    if [ -n "$registry_auth" ]; then
        echo "$registry_auth"
        return 0
    fi
    # If failed, fallback to retrieving credentials from docker config / cred store.
    docker_auth.sh -m k8s registry.redhat.io
}

quay_registry_auth() {
    docker_auth.sh -m k8s "quay.io"
}

rhacs_auth="$(echo "$(redhat_registry_auth)" "$(quay_registry_auth)" | jq -s add)" # merge auth config for both registries
log "$rhacs_auth"
log "Creating rhacs-registry image pull secret in namespace ${STACKROX_OPERATOR_NAMESPACE}"
print_pull_secret "rhacs-registry" "$rhacs_auth" | $KUBECTL -n "$STACKROX_OPERATOR_NAMESPACE" apply -f -
log "Creating redhat-pull-secret image pull secret in namespace rhacs-vertical-pod-autoscaler"
print_pull_secret "redhat-pull-secret" "$(redhat_registry_auth)" | $KUBECTL -n "rhacs-vertical-pod-autoscaler" apply -f -
log
