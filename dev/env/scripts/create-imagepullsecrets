#!/usr/bin/env bash

## This script assembles ImagePullSecrets for Quay.io as Kubernetes manifests ready for applying them to a cluster.

GITROOT="$(git rev-parse --show-toplevel)"
export GITROOT
# shellcheck source=/dev/null
source "${GITROOT}/dev/env/scripts/lib.sh"

registry="quay.io"
username="${QUAY_USER:-}"
password="${QUAY_TOKEN:-}"

if type openssl >/dev/null 2>&1; then
    b64enc_cmd=(openssl base64)
elif type base64 >/dev/null 2>&1; then
    b64enc_cmd=(base64)
else
    echo "No base64 command was found on your system!" 1>&2
    exit 1
fi

if ! "${b64enc_cmd[@]}" </dev/null >/dev/null 2>&1; then
    echo >&2 "${b64enc_cmd[*]} command fails to encode an empty string!"
    exit 1
fi

if [[ -z "${username}" ]]; then
    echo -n "Enter quay.io username: "
    read -r username
fi

if [[ -z "${password}" ]]; then
    echo -n "Enter quay.io password: "
    read -r -s password
fi

function b64enc() {
    echo -n "$1" | "${b64enc_cmd[@]}" | tr -d '\n'
}

function url2std() {
    tr '_-' '/+' | tr -d '\n'
}

function std2url() {
    tr '/+' '_-' | tr -d '\n'
}

function mkauth() {
    local username="$1"
    local password="$2"

    b64enc "${username}:${password}" | std2url
    return $?
}

function print_auth() {
    local auth_token="$1"
    if [[ -z $auth_token ]]; then
        return 1
    fi
    local auth_token_std
    auth_token_std=$(url2std <<<"$auth_token")
    local auths_str="{\"auths\":{\"$registry\":{\"auth\":\"${auth_token_std}\"}}}"
    b64enc "$auths_str"
    return $?
}

registry_auth="$(print_auth "$(mkauth "${username}" "${password}")")"

if [[ "$INSTALL_OPERATOR" == "true" || "$RHACS_TARGETED_OPERATOR_UPGRADES" == "true" ]]; then
  log "Creating quay-ips image pull secret in namespace ${STACKROX_OPERATOR_NAMESPACE}"
    resOperatorImage=$(
        cat <<EOF
apiVersion: v1
data:
  .dockerconfigjson: ${registry_auth}
kind: Secret
metadata:
  name: quay-ips
  namespace: ${STACKROX_OPERATOR_NAMESPACE}
type: kubernetes.io/dockerconfigjson
EOF
    )
    echo "$resOperatorImage" | $KUBECTL -n "$STACKROX_OPERATOR_NAMESPACE" apply -f -
else
  log "Skipping creating quay-ips image pull secret in namespace ${STACKROX_OPERATOR_NAMESPACE}"
fi

log "Creating quay-ips image pull secret in namespace ${ACSCS_NAMESPACE}"
res=$(
    cat <<EOF
apiVersion: v1
data:
  .dockerconfigjson: ${registry_auth}
kind: Secret
metadata:
  name: quay-ips
  namespace: $ACSCS_NAMESPACE
type: kubernetes.io/dockerconfigjson
EOF
)
echo "$res" | $KUBECTL -n "$ACSCS_NAMESPACE" apply -f -

# On CI, we need to propagate the quay-ips pull secret
# to other namespaces otherwise we will get image pull errors.
# This will detect if running on openshift, and if yes, will
# update the global pull secret.
# See https://docs.openshift.com/container-platform/4.13/openshift_images/managing_images/using-image-pull-secrets.html
# Check if openshift-config namespace exists
if oc get namespace openshift-config >/dev/null 2>&1; then
  # create temp file to hold the pull secret
  tmpfile=$(mktemp)
  # check if the openshift-config/pull-secret secret exists
  if oc get secret/pull-secret -n openshift-config >/dev/null 2>&1; then
    oc get secret/pull-secret -n openshift-config --template='{{index .data ".dockerconfigjson" | base64decode}}' >"$tmpfile"
  else
    echo "{}" >"$tmpfile"
  fi
  # add quay-ips to the pull secret
  oc registry login --registry="quay.io" --auth-basic="${username}:${password}" --to="$tmpfile"
  # update the pull secret
  if oc get secret/pull-secret -n openshift-config >/dev/null 2>&1; then
    oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson="$tmpfile"
  else
    # create a docker config secret
    oc create secret docker-registry pull-secret -n openshift-config --from-file=.dockerconfigjson="$tmpfile"
  fi
else
  echo "openshift-config namespace does not exist, skipping adding quay-ips to pull-secret"
fi
