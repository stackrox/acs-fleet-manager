#!/usr/bin/env bash

GITROOT="$(git rev-parse --show-toplevel)"
export GITROOT
# shellcheck source=/dev/null
source "${GITROOT}/dev/env/scripts/lib.sh"
init

usage() {
    die "Usage: $0 <start|stop> <service name> <service port> <local port>"
}

if [[ $# -lt 3 ]]; then
    usage
fi

action="$1"
shift
service_name="$1"
shift
service_port="$1"
shift

pid_file="/tmp/.port-forwarding-${service_name}-${service_port}-pid"

case "$action" in

start)
    if [[ $# != 1 ]]; then
        usage
    fi

    local_port="$1"
    shift

    if [[ -f "${pid_file}" ]]; then
        log "Stopping previous port-forwarding"
        kill "$(cat "${pid_file}")" 2>/dev/null >&2 || true
        rm "${pid_file}"
    fi
    log "Enabling port-forwarding: ${service_name}:${service_port} is bound to localhost:${local_port}"
    $KUBECTL -n "$ACSCS_NAMESPACE" port-forward svc/"${service_name}" "${local_port}:${service_port}" >/dev/null &
    echo $! >"${pid_file}"
    ;;

start-recover)
  local_port="$1"
  shift

  # Starts port-forwarding to a service and is able to restart
  err_file="/tmp/err_port_forward${service_name}"
  rm "$err_file" || true
  $KUBECTL -n "$ACSCS_NAMESPACE" port-forward svc/"${service_name}" "${local_port}:${service_port}" 2>"$err_file" >/dev/null &

  while true
  do
    content=$(<dev "$err_file" | xargs)
    if [[ -n "$content" ]]; then
      killall kubectl
      rm "$err_file"
      sleep 1
      echo "Starting port-fowarding again"
      $KUBECTL -n "$ACSCS_NAMESPACE" port-forward svc/"${service_name}" "${local_port}:${service_port}" 2>"$err_file" >/dev/null &
    fi
    sleep 1
  done
  ;;

stop)

    if [[ -f "${pid_file}" ]]; then
        log "Stopping port-forwarding"
        kill "$(cat "${pid_file}")" 2>/dev/null >&2 || true
        rm "${pid_file}"
    fi
    ;;

*)
    die "Unknown action '$action': must be either 'start' or 'stop'"
    ;;
esac
