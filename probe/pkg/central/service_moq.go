// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package central

import (
	"context"
	"github.com/stackrox/acs-fleet-manager/internal/central/pkg/api/public"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked Service
//		mockedService := &ServiceMock{
//			CreateFunc: func(ctx context.Context, name string, spec Spec) (public.CentralRequest, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id string) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, id string) (public.CentralRequest, error) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(ctx context.Context, spec Spec) ([]public.CentralRequest, error) {
//				panic("mock out the List method")
//			},
//			ListSpecsFunc: func(ctx context.Context) ([]Spec, error) {
//				panic("mock out the ListSpecs method")
//			},
//			PingFunc: func(ctx context.Context, url string) error {
//				panic("mock out the Ping method")
//			},
//		}
//
//		// use mockedService in code that requires Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, name string, spec Spec) (public.CentralRequest, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id string) (public.CentralRequest, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, spec Spec) ([]public.CentralRequest, error)

	// ListSpecsFunc mocks the ListSpecs method.
	ListSpecsFunc func(ctx context.Context) ([]Spec, error)

	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context, url string) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Spec is the spec argument value.
			Spec Spec
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Spec is the spec argument value.
			Spec Spec
		}
		// ListSpecs holds details about calls to the ListSpecs method.
		ListSpecs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
	}
	lockCreate    sync.RWMutex
	lockDelete    sync.RWMutex
	lockGet       sync.RWMutex
	lockList      sync.RWMutex
	lockListSpecs sync.RWMutex
	lockPing      sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(ctx context.Context, name string, spec Spec) (public.CentralRequest, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Spec Spec
	}{
		Ctx:  ctx,
		Name: name,
		Spec: spec,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, name, spec)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	Ctx  context.Context
	Name string
	Spec Spec
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Spec Spec
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceMock) Delete(ctx context.Context, id string) error {
	if mock.DeleteFunc == nil {
		panic("ServiceMock.DeleteFunc: method is nil but Service.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedService.DeleteCalls())
func (mock *ServiceMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceMock) Get(ctx context.Context, id string) (public.CentralRequest, error) {
	if mock.GetFunc == nil {
		panic("ServiceMock.GetFunc: method is nil but Service.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedService.GetCalls())
func (mock *ServiceMock) GetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceMock) List(ctx context.Context, spec Spec) ([]public.CentralRequest, error) {
	if mock.ListFunc == nil {
		panic("ServiceMock.ListFunc: method is nil but Service.List was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Spec Spec
	}{
		Ctx:  ctx,
		Spec: spec,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, spec)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedService.ListCalls())
func (mock *ServiceMock) ListCalls() []struct {
	Ctx  context.Context
	Spec Spec
} {
	var calls []struct {
		Ctx  context.Context
		Spec Spec
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListSpecs calls ListSpecsFunc.
func (mock *ServiceMock) ListSpecs(ctx context.Context) ([]Spec, error) {
	if mock.ListSpecsFunc == nil {
		panic("ServiceMock.ListSpecsFunc: method is nil but Service.ListSpecs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListSpecs.Lock()
	mock.calls.ListSpecs = append(mock.calls.ListSpecs, callInfo)
	mock.lockListSpecs.Unlock()
	return mock.ListSpecsFunc(ctx)
}

// ListSpecsCalls gets all the calls that were made to ListSpecs.
// Check the length with:
//
//	len(mockedService.ListSpecsCalls())
func (mock *ServiceMock) ListSpecsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListSpecs.RLock()
	calls = mock.calls.ListSpecs
	mock.lockListSpecs.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *ServiceMock) Ping(ctx context.Context, url string) error {
	if mock.PingFunc == nil {
		panic("ServiceMock.PingFunc: method is nil but Service.Ping was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx, url)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedService.PingCalls())
func (mock *ServiceMock) PingCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}
