name: Deploy to an ACS Environment

concurrency: ${{ inputs.github_environment }}

on:
  workflow_call:
    secrets:
      AWS_REGION:
        required: true
      AWS_ACCOUNT_ID:
        required: true
    inputs:
      acs_environment:
        description: 'Name of the ACS environment.'
        required: true
        type: string
      github_environment:
        description: 'Name of the environment defined in GitHub.'
        required: true
        type: string
      probe_clusters:
        description: 'Name of clusters to deploy probe to, space separated.'
        required: true
        type: string
      dry_run:
        description: 'Do not change any state if true.'
        type: boolean
        default: false
        required: false

env:
  HELM_DRY_RUN: ${{ inputs.dry_run }}

jobs:
  deploy-probe:
    name: Deploy blackbox monitoring probe service to ${{ inputs.acs_environment }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: ${{ inputs.github_environment }}
    steps:
      - name: Set up Go 1.20
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Critical for correct image detection in deploy script
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github
      - name: Deploy probe on ${{ inputs.probe_clusters }}
        working-directory: ./deploy/helm/probe
        # The probe requests Central instances located in the region of `probe_clusters`.
        # As a result, the respective US/EU data plane Prometheus instances contain only
        # metrics of probe runs related to their region.
        run: |
          set -euo pipefail
          # shellcheck disable=SC2043
          for cluster in ${{ inputs.probe_clusters }}
          do
            echo "Deploying probe to ${cluster}"
            ./deploy.sh ${{ inputs.acs_environment }} "${cluster}"
            echo "Probe deployment on ${cluster} succeeded"
          done
