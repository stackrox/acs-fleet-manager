// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package redhatsso

import (
	serviceaccountsclient "github.com/redhat-developer/app-services-sdk-go/serviceaccounts/apiv1internal/client"
	"github.com/stackrox/acs-fleet-manager/pkg/client/iam"
	"sync"
)

// Ensure, that SSOClientMock does implement SSOClient.
// If this is not the case, regenerate this file with moq.
var _ SSOClient = &SSOClientMock{}

// SSOClientMock is a mock implementation of SSOClient.
//
// 	func TestSomethingThatUsesSSOClient(t *testing.T) {
//
// 		// make and configure a mocked SSOClient
// 		mockedSSOClient := &SSOClientMock{
// 			CreateServiceAccountFunc: func(name string, description string) (serviceaccountsclient.ServiceAccountData, error) {
// 				panic("mock out the CreateServiceAccount method")
// 			},
// 			DeleteServiceAccountFunc: func(clientID string) error {
// 				panic("mock out the DeleteServiceAccount method")
// 			},
// 			GetConfigFunc: func() *iam.IAMConfig {
// 				panic("mock out the GetConfig method")
// 			},
// 			GetRealmConfigFunc: func() *iam.IAMRealmConfig {
// 				panic("mock out the GetRealmConfig method")
// 			},
// 			GetServiceAccountFunc: func(clientID string) (*serviceaccountsclient.ServiceAccountData, bool, error) {
// 				panic("mock out the GetServiceAccount method")
// 			},
// 			GetServiceAccountsFunc: func(first int, max int) ([]serviceaccountsclient.ServiceAccountData, error) {
// 				panic("mock out the GetServiceAccounts method")
// 			},
// 			RegenerateClientSecretFunc: func(id string) (serviceaccountsclient.ServiceAccountData, error) {
// 				panic("mock out the RegenerateClientSecret method")
// 			},
// 			UpdateServiceAccountFunc: func(clientID string, name string, description string) (serviceaccountsclient.ServiceAccountData, error) {
// 				panic("mock out the UpdateServiceAccount method")
// 			},
// 		}
//
// 		// use mockedSSOClient in code that requires SSOClient
// 		// and then make assertions.
//
// 	}
type SSOClientMock struct {
	// CreateServiceAccountFunc mocks the CreateServiceAccount method.
	CreateServiceAccountFunc func(name string, description string) (serviceaccountsclient.ServiceAccountData, error)

	// DeleteServiceAccountFunc mocks the DeleteServiceAccount method.
	DeleteServiceAccountFunc func(clientID string) error

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *iam.IAMConfig

	// GetRealmConfigFunc mocks the GetRealmConfig method.
	GetRealmConfigFunc func() *iam.IAMRealmConfig

	// GetServiceAccountFunc mocks the GetServiceAccount method.
	GetServiceAccountFunc func(clientID string) (*serviceaccountsclient.ServiceAccountData, bool, error)

	// GetServiceAccountsFunc mocks the GetServiceAccounts method.
	GetServiceAccountsFunc func(first int, max int) ([]serviceaccountsclient.ServiceAccountData, error)

	// RegenerateClientSecretFunc mocks the RegenerateClientSecret method.
	RegenerateClientSecretFunc func(id string) (serviceaccountsclient.ServiceAccountData, error)

	// UpdateServiceAccountFunc mocks the UpdateServiceAccount method.
	UpdateServiceAccountFunc func(clientID string, name string, description string) (serviceaccountsclient.ServiceAccountData, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateServiceAccount holds details about calls to the CreateServiceAccount method.
		CreateServiceAccount []struct {
			// Name is the name argument value.
			Name string
			// Description is the description argument value.
			Description string
		}
		// DeleteServiceAccount holds details about calls to the DeleteServiceAccount method.
		DeleteServiceAccount []struct {
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetRealmConfig holds details about calls to the GetRealmConfig method.
		GetRealmConfig []struct {
		}
		// GetServiceAccount holds details about calls to the GetServiceAccount method.
		GetServiceAccount []struct {
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetServiceAccounts holds details about calls to the GetServiceAccounts method.
		GetServiceAccounts []struct {
			// First is the first argument value.
			First int
			// Max is the max argument value.
			Max int
		}
		// RegenerateClientSecret holds details about calls to the RegenerateClientSecret method.
		RegenerateClientSecret []struct {
			// ID is the id argument value.
			ID string
		}
		// UpdateServiceAccount holds details about calls to the UpdateServiceAccount method.
		UpdateServiceAccount []struct {
			// ClientID is the clientID argument value.
			ClientID string
			// Name is the name argument value.
			Name string
			// Description is the description argument value.
			Description string
		}
	}
	lockCreateServiceAccount   sync.RWMutex
	lockDeleteServiceAccount   sync.RWMutex
	lockGetConfig              sync.RWMutex
	lockGetRealmConfig         sync.RWMutex
	lockGetServiceAccount      sync.RWMutex
	lockGetServiceAccounts     sync.RWMutex
	lockRegenerateClientSecret sync.RWMutex
	lockUpdateServiceAccount   sync.RWMutex
}

// CreateServiceAccount calls CreateServiceAccountFunc.
func (mock *SSOClientMock) CreateServiceAccount(name string, description string) (serviceaccountsclient.ServiceAccountData, error) {
	if mock.CreateServiceAccountFunc == nil {
		panic("SSOClientMock.CreateServiceAccountFunc: method is nil but SSOClient.CreateServiceAccount was just called")
	}
	callInfo := struct {
		Name        string
		Description string
	}{
		Name:        name,
		Description: description,
	}
	mock.lockCreateServiceAccount.Lock()
	mock.calls.CreateServiceAccount = append(mock.calls.CreateServiceAccount, callInfo)
	mock.lockCreateServiceAccount.Unlock()
	return mock.CreateServiceAccountFunc(name, description)
}

// CreateServiceAccountCalls gets all the calls that were made to CreateServiceAccount.
// Check the length with:
//     len(mockedSSOClient.CreateServiceAccountCalls())
func (mock *SSOClientMock) CreateServiceAccountCalls() []struct {
	Name        string
	Description string
} {
	var calls []struct {
		Name        string
		Description string
	}
	mock.lockCreateServiceAccount.RLock()
	calls = mock.calls.CreateServiceAccount
	mock.lockCreateServiceAccount.RUnlock()
	return calls
}

// DeleteServiceAccount calls DeleteServiceAccountFunc.
func (mock *SSOClientMock) DeleteServiceAccount(clientID string) error {
	if mock.DeleteServiceAccountFunc == nil {
		panic("SSOClientMock.DeleteServiceAccountFunc: method is nil but SSOClient.DeleteServiceAccount was just called")
	}
	callInfo := struct {
		ClientID string
	}{
		ClientID: clientID,
	}
	mock.lockDeleteServiceAccount.Lock()
	mock.calls.DeleteServiceAccount = append(mock.calls.DeleteServiceAccount, callInfo)
	mock.lockDeleteServiceAccount.Unlock()
	return mock.DeleteServiceAccountFunc(clientID)
}

// DeleteServiceAccountCalls gets all the calls that were made to DeleteServiceAccount.
// Check the length with:
//     len(mockedSSOClient.DeleteServiceAccountCalls())
func (mock *SSOClientMock) DeleteServiceAccountCalls() []struct {
	ClientID string
} {
	var calls []struct {
		ClientID string
	}
	mock.lockDeleteServiceAccount.RLock()
	calls = mock.calls.DeleteServiceAccount
	mock.lockDeleteServiceAccount.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *SSOClientMock) GetConfig() *iam.IAMConfig {
	if mock.GetConfigFunc == nil {
		panic("SSOClientMock.GetConfigFunc: method is nil but SSOClient.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//     len(mockedSSOClient.GetConfigCalls())
func (mock *SSOClientMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetRealmConfig calls GetRealmConfigFunc.
func (mock *SSOClientMock) GetRealmConfig() *iam.IAMRealmConfig {
	if mock.GetRealmConfigFunc == nil {
		panic("SSOClientMock.GetRealmConfigFunc: method is nil but SSOClient.GetRealmConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRealmConfig.Lock()
	mock.calls.GetRealmConfig = append(mock.calls.GetRealmConfig, callInfo)
	mock.lockGetRealmConfig.Unlock()
	return mock.GetRealmConfigFunc()
}

// GetRealmConfigCalls gets all the calls that were made to GetRealmConfig.
// Check the length with:
//     len(mockedSSOClient.GetRealmConfigCalls())
func (mock *SSOClientMock) GetRealmConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRealmConfig.RLock()
	calls = mock.calls.GetRealmConfig
	mock.lockGetRealmConfig.RUnlock()
	return calls
}

// GetServiceAccount calls GetServiceAccountFunc.
func (mock *SSOClientMock) GetServiceAccount(clientID string) (*serviceaccountsclient.ServiceAccountData, bool, error) {
	if mock.GetServiceAccountFunc == nil {
		panic("SSOClientMock.GetServiceAccountFunc: method is nil but SSOClient.GetServiceAccount was just called")
	}
	callInfo := struct {
		ClientID string
	}{
		ClientID: clientID,
	}
	mock.lockGetServiceAccount.Lock()
	mock.calls.GetServiceAccount = append(mock.calls.GetServiceAccount, callInfo)
	mock.lockGetServiceAccount.Unlock()
	return mock.GetServiceAccountFunc(clientID)
}

// GetServiceAccountCalls gets all the calls that were made to GetServiceAccount.
// Check the length with:
//     len(mockedSSOClient.GetServiceAccountCalls())
func (mock *SSOClientMock) GetServiceAccountCalls() []struct {
	ClientID string
} {
	var calls []struct {
		ClientID string
	}
	mock.lockGetServiceAccount.RLock()
	calls = mock.calls.GetServiceAccount
	mock.lockGetServiceAccount.RUnlock()
	return calls
}

// GetServiceAccounts calls GetServiceAccountsFunc.
func (mock *SSOClientMock) GetServiceAccounts(first int, max int) ([]serviceaccountsclient.ServiceAccountData, error) {
	if mock.GetServiceAccountsFunc == nil {
		panic("SSOClientMock.GetServiceAccountsFunc: method is nil but SSOClient.GetServiceAccounts was just called")
	}
	callInfo := struct {
		First int
		Max   int
	}{
		First: first,
		Max:   max,
	}
	mock.lockGetServiceAccounts.Lock()
	mock.calls.GetServiceAccounts = append(mock.calls.GetServiceAccounts, callInfo)
	mock.lockGetServiceAccounts.Unlock()
	return mock.GetServiceAccountsFunc(first, max)
}

// GetServiceAccountsCalls gets all the calls that were made to GetServiceAccounts.
// Check the length with:
//     len(mockedSSOClient.GetServiceAccountsCalls())
func (mock *SSOClientMock) GetServiceAccountsCalls() []struct {
	First int
	Max   int
} {
	var calls []struct {
		First int
		Max   int
	}
	mock.lockGetServiceAccounts.RLock()
	calls = mock.calls.GetServiceAccounts
	mock.lockGetServiceAccounts.RUnlock()
	return calls
}

// RegenerateClientSecret calls RegenerateClientSecretFunc.
func (mock *SSOClientMock) RegenerateClientSecret(id string) (serviceaccountsclient.ServiceAccountData, error) {
	if mock.RegenerateClientSecretFunc == nil {
		panic("SSOClientMock.RegenerateClientSecretFunc: method is nil but SSOClient.RegenerateClientSecret was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockRegenerateClientSecret.Lock()
	mock.calls.RegenerateClientSecret = append(mock.calls.RegenerateClientSecret, callInfo)
	mock.lockRegenerateClientSecret.Unlock()
	return mock.RegenerateClientSecretFunc(id)
}

// RegenerateClientSecretCalls gets all the calls that were made to RegenerateClientSecret.
// Check the length with:
//     len(mockedSSOClient.RegenerateClientSecretCalls())
func (mock *SSOClientMock) RegenerateClientSecretCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockRegenerateClientSecret.RLock()
	calls = mock.calls.RegenerateClientSecret
	mock.lockRegenerateClientSecret.RUnlock()
	return calls
}

// UpdateServiceAccount calls UpdateServiceAccountFunc.
func (mock *SSOClientMock) UpdateServiceAccount(clientID string, name string, description string) (serviceaccountsclient.ServiceAccountData, error) {
	if mock.UpdateServiceAccountFunc == nil {
		panic("SSOClientMock.UpdateServiceAccountFunc: method is nil but SSOClient.UpdateServiceAccount was just called")
	}
	callInfo := struct {
		ClientID    string
		Name        string
		Description string
	}{
		ClientID:    clientID,
		Name:        name,
		Description: description,
	}
	mock.lockUpdateServiceAccount.Lock()
	mock.calls.UpdateServiceAccount = append(mock.calls.UpdateServiceAccount, callInfo)
	mock.lockUpdateServiceAccount.Unlock()
	return mock.UpdateServiceAccountFunc(clientID, name, description)
}

// UpdateServiceAccountCalls gets all the calls that were made to UpdateServiceAccount.
// Check the length with:
//     len(mockedSSOClient.UpdateServiceAccountCalls())
func (mock *SSOClientMock) UpdateServiceAccountCalls() []struct {
	ClientID    string
	Name        string
	Description string
} {
	var calls []struct {
		ClientID    string
		Name        string
		Description string
	}
	mock.lockUpdateServiceAccount.RLock()
	calls = mock.calls.UpdateServiceAccount
	mock.lockUpdateServiceAccount.RUnlock()
	return calls
}
