// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	sdkClient "github.com/openshift-online/ocm-sdk-go"
	amsv1 "github.com/openshift-online/ocm-sdk-go/accountsmgmt/v1"
	addonsmgmtv1 "github.com/openshift-online/ocm-sdk-go/addonsmgmt/v1"
	clustersmgmtv1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	"github.com/stackrox/acs-fleet-manager/pkg/client/ocm"
	serviceErrors "github.com/stackrox/acs-fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that ClientMock does implement ocm.Client.
// If this is not the case, regenerate this file with moq.
var _ ocm.Client = &ClientMock{}

// ClientMock is a mock implementation of ocm.Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked ocm.Client
//		mockedClient := &ClientMock{
//			ClusterAuthorizationFunc: func(cb *amsv1.ClusterAuthorizationRequest) (*amsv1.ClusterAuthorizationResponse, error) {
//				panic("mock out the ClusterAuthorization method")
//			},
//			ConnectionFunc: func() *sdkClient.Connection {
//				panic("mock out the Connection method")
//			},
//			CreateAddonInstallationFunc: func(clusterID string, addon *clustersmgmtv1.AddOnInstallation) error {
//				panic("mock out the CreateAddonInstallation method")
//			},
//			CreateClusterFunc: func(cluster *clustersmgmtv1.Cluster) (*clustersmgmtv1.Cluster, error) {
//				panic("mock out the CreateCluster method")
//			},
//			CreateIdentityProviderFunc: func(clusterID string, identityProvider *clustersmgmtv1.IdentityProvider) (*clustersmgmtv1.IdentityProvider, error) {
//				panic("mock out the CreateIdentityProvider method")
//			},
//			DeleteAddonInstallationFunc: func(clusterID string, addonID string) error {
//				panic("mock out the DeleteAddonInstallation method")
//			},
//			DeleteClusterFunc: func(clusterID string) (int, error) {
//				panic("mock out the DeleteCluster method")
//			},
//			DeleteSubscriptionFunc: func(id string) (int, error) {
//				panic("mock out the DeleteSubscription method")
//			},
//			FindSubscriptionsFunc: func(query string) (*amsv1.SubscriptionsListResponse, error) {
//				panic("mock out the FindSubscriptions method")
//			},
//			GetAddonFunc: func(addonID string) (*addonsmgmtv1.Addon, error) {
//				panic("mock out the GetAddon method")
//			},
//			GetAddonInstallationFunc: func(clusterID string, addonID string) (*clustersmgmtv1.AddOnInstallation, *serviceErrors.ServiceError) {
//				panic("mock out the GetAddonInstallation method")
//			},
//			GetAddonVersionFunc: func(addonID string, version string) (*addonsmgmtv1.AddonVersion, error) {
//				panic("mock out the GetAddonVersion method")
//			},
//			GetCloudProvidersFunc: func() (*clustersmgmtv1.CloudProviderList, error) {
//				panic("mock out the GetCloudProviders method")
//			},
//			GetClusterFunc: func(clusterID string) (*clustersmgmtv1.Cluster, error) {
//				panic("mock out the GetCluster method")
//			},
//			GetClusterDNSFunc: func(clusterID string) (string, error) {
//				panic("mock out the GetClusterDNS method")
//			},
//			GetClusterIngressesFunc: func(clusterID string) (*clustersmgmtv1.IngressesListResponse, error) {
//				panic("mock out the GetClusterIngresses method")
//			},
//			GetClusterStatusFunc: func(id string) (*clustersmgmtv1.ClusterStatus, error) {
//				panic("mock out the GetClusterStatus method")
//			},
//			GetCurrentAccountFunc: func(userToken string) (int, *amsv1.Account, error) {
//				panic("mock out the GetCurrentAccount method")
//			},
//			GetCustomerCloudAccountsFunc: func(organizationID string, quotaIDs []string) ([]*amsv1.CloudAccount, error) {
//				panic("mock out the GetCustomerCloudAccounts method")
//			},
//			GetExistingClusterMetricsFunc: func(clusterID string) (*amsv1.SubscriptionMetrics, error) {
//				panic("mock out the GetExistingClusterMetrics method")
//			},
//			GetOrganisationFromExternalIDFunc: func(externalID string) (*amsv1.Organization, error) {
//				panic("mock out the GetOrganisationFromExternalID method")
//			},
//			GetQuotaCostsForProductFunc: func(organizationID string, resourceName string, product string) ([]*amsv1.QuotaCost, error) {
//				panic("mock out the GetQuotaCostsForProduct method")
//			},
//			GetRegionsFunc: func(provider *clustersmgmtv1.CloudProvider) (*clustersmgmtv1.CloudRegionList, error) {
//				panic("mock out the GetRegions method")
//			},
//			GetRequiresTermsAcceptanceFunc: func(username string) (bool, string, error) {
//				panic("mock out the GetRequiresTermsAcceptance method")
//			},
//			UpdateAddonInstallationFunc: func(clusterID string, addon *clustersmgmtv1.AddOnInstallation) error {
//				panic("mock out the UpdateAddonInstallation method")
//			},
//		}
//
//		// use mockedClient in code that requires ocm.Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// ClusterAuthorizationFunc mocks the ClusterAuthorization method.
	ClusterAuthorizationFunc func(cb *amsv1.ClusterAuthorizationRequest) (*amsv1.ClusterAuthorizationResponse, error)

	// ConnectionFunc mocks the Connection method.
	ConnectionFunc func() *sdkClient.Connection

	// CreateAddonInstallationFunc mocks the CreateAddonInstallation method.
	CreateAddonInstallationFunc func(clusterID string, addon *clustersmgmtv1.AddOnInstallation) error

	// CreateClusterFunc mocks the CreateCluster method.
	CreateClusterFunc func(cluster *clustersmgmtv1.Cluster) (*clustersmgmtv1.Cluster, error)

	// CreateIdentityProviderFunc mocks the CreateIdentityProvider method.
	CreateIdentityProviderFunc func(clusterID string, identityProvider *clustersmgmtv1.IdentityProvider) (*clustersmgmtv1.IdentityProvider, error)

	// DeleteAddonInstallationFunc mocks the DeleteAddonInstallation method.
	DeleteAddonInstallationFunc func(clusterID string, addonID string) error

	// DeleteClusterFunc mocks the DeleteCluster method.
	DeleteClusterFunc func(clusterID string) (int, error)

	// DeleteSubscriptionFunc mocks the DeleteSubscription method.
	DeleteSubscriptionFunc func(id string) (int, error)

	// FindSubscriptionsFunc mocks the FindSubscriptions method.
	FindSubscriptionsFunc func(query string) (*amsv1.SubscriptionsListResponse, error)

	// GetAddonFunc mocks the GetAddon method.
	GetAddonFunc func(addonID string) (*addonsmgmtv1.Addon, error)

	// GetAddonInstallationFunc mocks the GetAddonInstallation method.
	GetAddonInstallationFunc func(clusterID string, addonID string) (*clustersmgmtv1.AddOnInstallation, *serviceErrors.ServiceError)

	// GetAddonVersionFunc mocks the GetAddonVersion method.
	GetAddonVersionFunc func(addonID string, version string) (*addonsmgmtv1.AddonVersion, error)

	// GetCloudProvidersFunc mocks the GetCloudProviders method.
	GetCloudProvidersFunc func() (*clustersmgmtv1.CloudProviderList, error)

	// GetClusterFunc mocks the GetCluster method.
	GetClusterFunc func(clusterID string) (*clustersmgmtv1.Cluster, error)

	// GetClusterDNSFunc mocks the GetClusterDNS method.
	GetClusterDNSFunc func(clusterID string) (string, error)

	// GetClusterIngressesFunc mocks the GetClusterIngresses method.
	GetClusterIngressesFunc func(clusterID string) (*clustersmgmtv1.IngressesListResponse, error)

	// GetClusterStatusFunc mocks the GetClusterStatus method.
	GetClusterStatusFunc func(id string) (*clustersmgmtv1.ClusterStatus, error)

	// GetCurrentAccountFunc mocks the GetCurrentAccount method.
	GetCurrentAccountFunc func(userToken string) (int, *amsv1.Account, error)

	// GetCustomerCloudAccountsFunc mocks the GetCustomerCloudAccounts method.
	GetCustomerCloudAccountsFunc func(organizationID string, quotaIDs []string) ([]*amsv1.CloudAccount, error)

	// GetExistingClusterMetricsFunc mocks the GetExistingClusterMetrics method.
	GetExistingClusterMetricsFunc func(clusterID string) (*amsv1.SubscriptionMetrics, error)

	// GetOrganisationFromExternalIDFunc mocks the GetOrganisationFromExternalID method.
	GetOrganisationFromExternalIDFunc func(externalID string) (*amsv1.Organization, error)

	// GetQuotaCostsForProductFunc mocks the GetQuotaCostsForProduct method.
	GetQuotaCostsForProductFunc func(organizationID string, resourceName string, product string) ([]*amsv1.QuotaCost, error)

	// GetRegionsFunc mocks the GetRegions method.
	GetRegionsFunc func(provider *clustersmgmtv1.CloudProvider) (*clustersmgmtv1.CloudRegionList, error)

	// GetRequiresTermsAcceptanceFunc mocks the GetRequiresTermsAcceptance method.
	GetRequiresTermsAcceptanceFunc func(username string) (bool, string, error)

	// UpdateAddonInstallationFunc mocks the UpdateAddonInstallation method.
	UpdateAddonInstallationFunc func(clusterID string, addon *clustersmgmtv1.AddOnInstallation) error

	// calls tracks calls to the methods.
	calls struct {
		// ClusterAuthorization holds details about calls to the ClusterAuthorization method.
		ClusterAuthorization []struct {
			// Cb is the cb argument value.
			Cb *amsv1.ClusterAuthorizationRequest
		}
		// Connection holds details about calls to the Connection method.
		Connection []struct {
		}
		// CreateAddonInstallation holds details about calls to the CreateAddonInstallation method.
		CreateAddonInstallation []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Addon is the addon argument value.
			Addon *clustersmgmtv1.AddOnInstallation
		}
		// CreateCluster holds details about calls to the CreateCluster method.
		CreateCluster []struct {
			// Cluster is the cluster argument value.
			Cluster *clustersmgmtv1.Cluster
		}
		// CreateIdentityProvider holds details about calls to the CreateIdentityProvider method.
		CreateIdentityProvider []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// IdentityProvider is the identityProvider argument value.
			IdentityProvider *clustersmgmtv1.IdentityProvider
		}
		// DeleteAddonInstallation holds details about calls to the DeleteAddonInstallation method.
		DeleteAddonInstallation []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// AddonID is the addonID argument value.
			AddonID string
		}
		// DeleteCluster holds details about calls to the DeleteCluster method.
		DeleteCluster []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// DeleteSubscription holds details about calls to the DeleteSubscription method.
		DeleteSubscription []struct {
			// ID is the id argument value.
			ID string
		}
		// FindSubscriptions holds details about calls to the FindSubscriptions method.
		FindSubscriptions []struct {
			// Query is the query argument value.
			Query string
		}
		// GetAddon holds details about calls to the GetAddon method.
		GetAddon []struct {
			// AddonID is the addonID argument value.
			AddonID string
		}
		// GetAddonInstallation holds details about calls to the GetAddonInstallation method.
		GetAddonInstallation []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// AddonID is the addonID argument value.
			AddonID string
		}
		// GetAddonVersion holds details about calls to the GetAddonVersion method.
		GetAddonVersion []struct {
			// AddonID is the addonID argument value.
			AddonID string
			// Version is the version argument value.
			Version string
		}
		// GetCloudProviders holds details about calls to the GetCloudProviders method.
		GetCloudProviders []struct {
		}
		// GetCluster holds details about calls to the GetCluster method.
		GetCluster []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterDNS holds details about calls to the GetClusterDNS method.
		GetClusterDNS []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterIngresses holds details about calls to the GetClusterIngresses method.
		GetClusterIngresses []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterStatus holds details about calls to the GetClusterStatus method.
		GetClusterStatus []struct {
			// ID is the id argument value.
			ID string
		}
		// GetCurrentAccount holds details about calls to the GetCurrentAccount method.
		GetCurrentAccount []struct {
			// UserToken is the userToken argument value.
			UserToken string
		}
		// GetCustomerCloudAccounts holds details about calls to the GetCustomerCloudAccounts method.
		GetCustomerCloudAccounts []struct {
			// OrganizationID is the organizationID argument value.
			OrganizationID string
			// QuotaIDs is the quotaIDs argument value.
			QuotaIDs []string
		}
		// GetExistingClusterMetrics holds details about calls to the GetExistingClusterMetrics method.
		GetExistingClusterMetrics []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetOrganisationFromExternalID holds details about calls to the GetOrganisationFromExternalID method.
		GetOrganisationFromExternalID []struct {
			// ExternalID is the externalID argument value.
			ExternalID string
		}
		// GetQuotaCostsForProduct holds details about calls to the GetQuotaCostsForProduct method.
		GetQuotaCostsForProduct []struct {
			// OrganizationID is the organizationID argument value.
			OrganizationID string
			// ResourceName is the resourceName argument value.
			ResourceName string
			// Product is the product argument value.
			Product string
		}
		// GetRegions holds details about calls to the GetRegions method.
		GetRegions []struct {
			// Provider is the provider argument value.
			Provider *clustersmgmtv1.CloudProvider
		}
		// GetRequiresTermsAcceptance holds details about calls to the GetRequiresTermsAcceptance method.
		GetRequiresTermsAcceptance []struct {
			// Username is the username argument value.
			Username string
		}
		// UpdateAddonInstallation holds details about calls to the UpdateAddonInstallation method.
		UpdateAddonInstallation []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Addon is the addon argument value.
			Addon *clustersmgmtv1.AddOnInstallation
		}
	}
	lockClusterAuthorization          sync.RWMutex
	lockConnection                    sync.RWMutex
	lockCreateAddonInstallation       sync.RWMutex
	lockCreateCluster                 sync.RWMutex
	lockCreateIdentityProvider        sync.RWMutex
	lockDeleteAddonInstallation       sync.RWMutex
	lockDeleteCluster                 sync.RWMutex
	lockDeleteSubscription            sync.RWMutex
	lockFindSubscriptions             sync.RWMutex
	lockGetAddon                      sync.RWMutex
	lockGetAddonInstallation          sync.RWMutex
	lockGetAddonVersion               sync.RWMutex
	lockGetCloudProviders             sync.RWMutex
	lockGetCluster                    sync.RWMutex
	lockGetClusterDNS                 sync.RWMutex
	lockGetClusterIngresses           sync.RWMutex
	lockGetClusterStatus              sync.RWMutex
	lockGetCurrentAccount             sync.RWMutex
	lockGetCustomerCloudAccounts      sync.RWMutex
	lockGetExistingClusterMetrics     sync.RWMutex
	lockGetOrganisationFromExternalID sync.RWMutex
	lockGetQuotaCostsForProduct       sync.RWMutex
	lockGetRegions                    sync.RWMutex
	lockGetRequiresTermsAcceptance    sync.RWMutex
	lockUpdateAddonInstallation       sync.RWMutex
}

// ClusterAuthorization calls ClusterAuthorizationFunc.
func (mock *ClientMock) ClusterAuthorization(cb *amsv1.ClusterAuthorizationRequest) (*amsv1.ClusterAuthorizationResponse, error) {
	if mock.ClusterAuthorizationFunc == nil {
		panic("ClientMock.ClusterAuthorizationFunc: method is nil but Client.ClusterAuthorization was just called")
	}
	callInfo := struct {
		Cb *amsv1.ClusterAuthorizationRequest
	}{
		Cb: cb,
	}
	mock.lockClusterAuthorization.Lock()
	mock.calls.ClusterAuthorization = append(mock.calls.ClusterAuthorization, callInfo)
	mock.lockClusterAuthorization.Unlock()
	return mock.ClusterAuthorizationFunc(cb)
}

// ClusterAuthorizationCalls gets all the calls that were made to ClusterAuthorization.
// Check the length with:
//
//	len(mockedClient.ClusterAuthorizationCalls())
func (mock *ClientMock) ClusterAuthorizationCalls() []struct {
	Cb *amsv1.ClusterAuthorizationRequest
} {
	var calls []struct {
		Cb *amsv1.ClusterAuthorizationRequest
	}
	mock.lockClusterAuthorization.RLock()
	calls = mock.calls.ClusterAuthorization
	mock.lockClusterAuthorization.RUnlock()
	return calls
}

// Connection calls ConnectionFunc.
func (mock *ClientMock) Connection() *sdkClient.Connection {
	if mock.ConnectionFunc == nil {
		panic("ClientMock.ConnectionFunc: method is nil but Client.Connection was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConnection.Lock()
	mock.calls.Connection = append(mock.calls.Connection, callInfo)
	mock.lockConnection.Unlock()
	return mock.ConnectionFunc()
}

// ConnectionCalls gets all the calls that were made to Connection.
// Check the length with:
//
//	len(mockedClient.ConnectionCalls())
func (mock *ClientMock) ConnectionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConnection.RLock()
	calls = mock.calls.Connection
	mock.lockConnection.RUnlock()
	return calls
}

// CreateAddonInstallation calls CreateAddonInstallationFunc.
func (mock *ClientMock) CreateAddonInstallation(clusterID string, addon *clustersmgmtv1.AddOnInstallation) error {
	if mock.CreateAddonInstallationFunc == nil {
		panic("ClientMock.CreateAddonInstallationFunc: method is nil but Client.CreateAddonInstallation was just called")
	}
	callInfo := struct {
		ClusterID string
		Addon     *clustersmgmtv1.AddOnInstallation
	}{
		ClusterID: clusterID,
		Addon:     addon,
	}
	mock.lockCreateAddonInstallation.Lock()
	mock.calls.CreateAddonInstallation = append(mock.calls.CreateAddonInstallation, callInfo)
	mock.lockCreateAddonInstallation.Unlock()
	return mock.CreateAddonInstallationFunc(clusterID, addon)
}

// CreateAddonInstallationCalls gets all the calls that were made to CreateAddonInstallation.
// Check the length with:
//
//	len(mockedClient.CreateAddonInstallationCalls())
func (mock *ClientMock) CreateAddonInstallationCalls() []struct {
	ClusterID string
	Addon     *clustersmgmtv1.AddOnInstallation
} {
	var calls []struct {
		ClusterID string
		Addon     *clustersmgmtv1.AddOnInstallation
	}
	mock.lockCreateAddonInstallation.RLock()
	calls = mock.calls.CreateAddonInstallation
	mock.lockCreateAddonInstallation.RUnlock()
	return calls
}

// CreateCluster calls CreateClusterFunc.
func (mock *ClientMock) CreateCluster(cluster *clustersmgmtv1.Cluster) (*clustersmgmtv1.Cluster, error) {
	if mock.CreateClusterFunc == nil {
		panic("ClientMock.CreateClusterFunc: method is nil but Client.CreateCluster was just called")
	}
	callInfo := struct {
		Cluster *clustersmgmtv1.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockCreateCluster.Lock()
	mock.calls.CreateCluster = append(mock.calls.CreateCluster, callInfo)
	mock.lockCreateCluster.Unlock()
	return mock.CreateClusterFunc(cluster)
}

// CreateClusterCalls gets all the calls that were made to CreateCluster.
// Check the length with:
//
//	len(mockedClient.CreateClusterCalls())
func (mock *ClientMock) CreateClusterCalls() []struct {
	Cluster *clustersmgmtv1.Cluster
} {
	var calls []struct {
		Cluster *clustersmgmtv1.Cluster
	}
	mock.lockCreateCluster.RLock()
	calls = mock.calls.CreateCluster
	mock.lockCreateCluster.RUnlock()
	return calls
}

// CreateIdentityProvider calls CreateIdentityProviderFunc.
func (mock *ClientMock) CreateIdentityProvider(clusterID string, identityProvider *clustersmgmtv1.IdentityProvider) (*clustersmgmtv1.IdentityProvider, error) {
	if mock.CreateIdentityProviderFunc == nil {
		panic("ClientMock.CreateIdentityProviderFunc: method is nil but Client.CreateIdentityProvider was just called")
	}
	callInfo := struct {
		ClusterID        string
		IdentityProvider *clustersmgmtv1.IdentityProvider
	}{
		ClusterID:        clusterID,
		IdentityProvider: identityProvider,
	}
	mock.lockCreateIdentityProvider.Lock()
	mock.calls.CreateIdentityProvider = append(mock.calls.CreateIdentityProvider, callInfo)
	mock.lockCreateIdentityProvider.Unlock()
	return mock.CreateIdentityProviderFunc(clusterID, identityProvider)
}

// CreateIdentityProviderCalls gets all the calls that were made to CreateIdentityProvider.
// Check the length with:
//
//	len(mockedClient.CreateIdentityProviderCalls())
func (mock *ClientMock) CreateIdentityProviderCalls() []struct {
	ClusterID        string
	IdentityProvider *clustersmgmtv1.IdentityProvider
} {
	var calls []struct {
		ClusterID        string
		IdentityProvider *clustersmgmtv1.IdentityProvider
	}
	mock.lockCreateIdentityProvider.RLock()
	calls = mock.calls.CreateIdentityProvider
	mock.lockCreateIdentityProvider.RUnlock()
	return calls
}

// DeleteAddonInstallation calls DeleteAddonInstallationFunc.
func (mock *ClientMock) DeleteAddonInstallation(clusterID string, addonID string) error {
	if mock.DeleteAddonInstallationFunc == nil {
		panic("ClientMock.DeleteAddonInstallationFunc: method is nil but Client.DeleteAddonInstallation was just called")
	}
	callInfo := struct {
		ClusterID string
		AddonID   string
	}{
		ClusterID: clusterID,
		AddonID:   addonID,
	}
	mock.lockDeleteAddonInstallation.Lock()
	mock.calls.DeleteAddonInstallation = append(mock.calls.DeleteAddonInstallation, callInfo)
	mock.lockDeleteAddonInstallation.Unlock()
	return mock.DeleteAddonInstallationFunc(clusterID, addonID)
}

// DeleteAddonInstallationCalls gets all the calls that were made to DeleteAddonInstallation.
// Check the length with:
//
//	len(mockedClient.DeleteAddonInstallationCalls())
func (mock *ClientMock) DeleteAddonInstallationCalls() []struct {
	ClusterID string
	AddonID   string
} {
	var calls []struct {
		ClusterID string
		AddonID   string
	}
	mock.lockDeleteAddonInstallation.RLock()
	calls = mock.calls.DeleteAddonInstallation
	mock.lockDeleteAddonInstallation.RUnlock()
	return calls
}

// DeleteCluster calls DeleteClusterFunc.
func (mock *ClientMock) DeleteCluster(clusterID string) (int, error) {
	if mock.DeleteClusterFunc == nil {
		panic("ClientMock.DeleteClusterFunc: method is nil but Client.DeleteCluster was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockDeleteCluster.Lock()
	mock.calls.DeleteCluster = append(mock.calls.DeleteCluster, callInfo)
	mock.lockDeleteCluster.Unlock()
	return mock.DeleteClusterFunc(clusterID)
}

// DeleteClusterCalls gets all the calls that were made to DeleteCluster.
// Check the length with:
//
//	len(mockedClient.DeleteClusterCalls())
func (mock *ClientMock) DeleteClusterCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockDeleteCluster.RLock()
	calls = mock.calls.DeleteCluster
	mock.lockDeleteCluster.RUnlock()
	return calls
}

// DeleteSubscription calls DeleteSubscriptionFunc.
func (mock *ClientMock) DeleteSubscription(id string) (int, error) {
	if mock.DeleteSubscriptionFunc == nil {
		panic("ClientMock.DeleteSubscriptionFunc: method is nil but Client.DeleteSubscription was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockDeleteSubscription.Lock()
	mock.calls.DeleteSubscription = append(mock.calls.DeleteSubscription, callInfo)
	mock.lockDeleteSubscription.Unlock()
	return mock.DeleteSubscriptionFunc(id)
}

// DeleteSubscriptionCalls gets all the calls that were made to DeleteSubscription.
// Check the length with:
//
//	len(mockedClient.DeleteSubscriptionCalls())
func (mock *ClientMock) DeleteSubscriptionCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockDeleteSubscription.RLock()
	calls = mock.calls.DeleteSubscription
	mock.lockDeleteSubscription.RUnlock()
	return calls
}

// FindSubscriptions calls FindSubscriptionsFunc.
func (mock *ClientMock) FindSubscriptions(query string) (*amsv1.SubscriptionsListResponse, error) {
	if mock.FindSubscriptionsFunc == nil {
		panic("ClientMock.FindSubscriptionsFunc: method is nil but Client.FindSubscriptions was just called")
	}
	callInfo := struct {
		Query string
	}{
		Query: query,
	}
	mock.lockFindSubscriptions.Lock()
	mock.calls.FindSubscriptions = append(mock.calls.FindSubscriptions, callInfo)
	mock.lockFindSubscriptions.Unlock()
	return mock.FindSubscriptionsFunc(query)
}

// FindSubscriptionsCalls gets all the calls that were made to FindSubscriptions.
// Check the length with:
//
//	len(mockedClient.FindSubscriptionsCalls())
func (mock *ClientMock) FindSubscriptionsCalls() []struct {
	Query string
} {
	var calls []struct {
		Query string
	}
	mock.lockFindSubscriptions.RLock()
	calls = mock.calls.FindSubscriptions
	mock.lockFindSubscriptions.RUnlock()
	return calls
}

// GetAddon calls GetAddonFunc.
func (mock *ClientMock) GetAddon(addonID string) (*addonsmgmtv1.Addon, error) {
	if mock.GetAddonFunc == nil {
		panic("ClientMock.GetAddonFunc: method is nil but Client.GetAddon was just called")
	}
	callInfo := struct {
		AddonID string
	}{
		AddonID: addonID,
	}
	mock.lockGetAddon.Lock()
	mock.calls.GetAddon = append(mock.calls.GetAddon, callInfo)
	mock.lockGetAddon.Unlock()
	return mock.GetAddonFunc(addonID)
}

// GetAddonCalls gets all the calls that were made to GetAddon.
// Check the length with:
//
//	len(mockedClient.GetAddonCalls())
func (mock *ClientMock) GetAddonCalls() []struct {
	AddonID string
} {
	var calls []struct {
		AddonID string
	}
	mock.lockGetAddon.RLock()
	calls = mock.calls.GetAddon
	mock.lockGetAddon.RUnlock()
	return calls
}

// GetAddonInstallation calls GetAddonInstallationFunc.
func (mock *ClientMock) GetAddonInstallation(clusterID string, addonID string) (*clustersmgmtv1.AddOnInstallation, *serviceErrors.ServiceError) {
	if mock.GetAddonInstallationFunc == nil {
		panic("ClientMock.GetAddonInstallationFunc: method is nil but Client.GetAddonInstallation was just called")
	}
	callInfo := struct {
		ClusterID string
		AddonID   string
	}{
		ClusterID: clusterID,
		AddonID:   addonID,
	}
	mock.lockGetAddonInstallation.Lock()
	mock.calls.GetAddonInstallation = append(mock.calls.GetAddonInstallation, callInfo)
	mock.lockGetAddonInstallation.Unlock()
	return mock.GetAddonInstallationFunc(clusterID, addonID)
}

// GetAddonInstallationCalls gets all the calls that were made to GetAddonInstallation.
// Check the length with:
//
//	len(mockedClient.GetAddonInstallationCalls())
func (mock *ClientMock) GetAddonInstallationCalls() []struct {
	ClusterID string
	AddonID   string
} {
	var calls []struct {
		ClusterID string
		AddonID   string
	}
	mock.lockGetAddonInstallation.RLock()
	calls = mock.calls.GetAddonInstallation
	mock.lockGetAddonInstallation.RUnlock()
	return calls
}

// GetAddonVersion calls GetAddonVersionFunc.
func (mock *ClientMock) GetAddonVersion(addonID string, version string) (*addonsmgmtv1.AddonVersion, error) {
	if mock.GetAddonVersionFunc == nil {
		panic("ClientMock.GetAddonVersionFunc: method is nil but Client.GetAddonVersion was just called")
	}
	callInfo := struct {
		AddonID string
		Version string
	}{
		AddonID: addonID,
		Version: version,
	}
	mock.lockGetAddonVersion.Lock()
	mock.calls.GetAddonVersion = append(mock.calls.GetAddonVersion, callInfo)
	mock.lockGetAddonVersion.Unlock()
	return mock.GetAddonVersionFunc(addonID, version)
}

// GetAddonVersionCalls gets all the calls that were made to GetAddonVersion.
// Check the length with:
//
//	len(mockedClient.GetAddonVersionCalls())
func (mock *ClientMock) GetAddonVersionCalls() []struct {
	AddonID string
	Version string
} {
	var calls []struct {
		AddonID string
		Version string
	}
	mock.lockGetAddonVersion.RLock()
	calls = mock.calls.GetAddonVersion
	mock.lockGetAddonVersion.RUnlock()
	return calls
}

// GetCloudProviders calls GetCloudProvidersFunc.
func (mock *ClientMock) GetCloudProviders() (*clustersmgmtv1.CloudProviderList, error) {
	if mock.GetCloudProvidersFunc == nil {
		panic("ClientMock.GetCloudProvidersFunc: method is nil but Client.GetCloudProviders was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetCloudProviders.Lock()
	mock.calls.GetCloudProviders = append(mock.calls.GetCloudProviders, callInfo)
	mock.lockGetCloudProviders.Unlock()
	return mock.GetCloudProvidersFunc()
}

// GetCloudProvidersCalls gets all the calls that were made to GetCloudProviders.
// Check the length with:
//
//	len(mockedClient.GetCloudProvidersCalls())
func (mock *ClientMock) GetCloudProvidersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetCloudProviders.RLock()
	calls = mock.calls.GetCloudProviders
	mock.lockGetCloudProviders.RUnlock()
	return calls
}

// GetCluster calls GetClusterFunc.
func (mock *ClientMock) GetCluster(clusterID string) (*clustersmgmtv1.Cluster, error) {
	if mock.GetClusterFunc == nil {
		panic("ClientMock.GetClusterFunc: method is nil but Client.GetCluster was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetCluster.Lock()
	mock.calls.GetCluster = append(mock.calls.GetCluster, callInfo)
	mock.lockGetCluster.Unlock()
	return mock.GetClusterFunc(clusterID)
}

// GetClusterCalls gets all the calls that were made to GetCluster.
// Check the length with:
//
//	len(mockedClient.GetClusterCalls())
func (mock *ClientMock) GetClusterCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetCluster.RLock()
	calls = mock.calls.GetCluster
	mock.lockGetCluster.RUnlock()
	return calls
}

// GetClusterDNS calls GetClusterDNSFunc.
func (mock *ClientMock) GetClusterDNS(clusterID string) (string, error) {
	if mock.GetClusterDNSFunc == nil {
		panic("ClientMock.GetClusterDNSFunc: method is nil but Client.GetClusterDNS was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterDNS.Lock()
	mock.calls.GetClusterDNS = append(mock.calls.GetClusterDNS, callInfo)
	mock.lockGetClusterDNS.Unlock()
	return mock.GetClusterDNSFunc(clusterID)
}

// GetClusterDNSCalls gets all the calls that were made to GetClusterDNS.
// Check the length with:
//
//	len(mockedClient.GetClusterDNSCalls())
func (mock *ClientMock) GetClusterDNSCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterDNS.RLock()
	calls = mock.calls.GetClusterDNS
	mock.lockGetClusterDNS.RUnlock()
	return calls
}

// GetClusterIngresses calls GetClusterIngressesFunc.
func (mock *ClientMock) GetClusterIngresses(clusterID string) (*clustersmgmtv1.IngressesListResponse, error) {
	if mock.GetClusterIngressesFunc == nil {
		panic("ClientMock.GetClusterIngressesFunc: method is nil but Client.GetClusterIngresses was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterIngresses.Lock()
	mock.calls.GetClusterIngresses = append(mock.calls.GetClusterIngresses, callInfo)
	mock.lockGetClusterIngresses.Unlock()
	return mock.GetClusterIngressesFunc(clusterID)
}

// GetClusterIngressesCalls gets all the calls that were made to GetClusterIngresses.
// Check the length with:
//
//	len(mockedClient.GetClusterIngressesCalls())
func (mock *ClientMock) GetClusterIngressesCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterIngresses.RLock()
	calls = mock.calls.GetClusterIngresses
	mock.lockGetClusterIngresses.RUnlock()
	return calls
}

// GetClusterStatus calls GetClusterStatusFunc.
func (mock *ClientMock) GetClusterStatus(id string) (*clustersmgmtv1.ClusterStatus, error) {
	if mock.GetClusterStatusFunc == nil {
		panic("ClientMock.GetClusterStatusFunc: method is nil but Client.GetClusterStatus was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetClusterStatus.Lock()
	mock.calls.GetClusterStatus = append(mock.calls.GetClusterStatus, callInfo)
	mock.lockGetClusterStatus.Unlock()
	return mock.GetClusterStatusFunc(id)
}

// GetClusterStatusCalls gets all the calls that were made to GetClusterStatus.
// Check the length with:
//
//	len(mockedClient.GetClusterStatusCalls())
func (mock *ClientMock) GetClusterStatusCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetClusterStatus.RLock()
	calls = mock.calls.GetClusterStatus
	mock.lockGetClusterStatus.RUnlock()
	return calls
}

// GetCurrentAccount calls GetCurrentAccountFunc.
func (mock *ClientMock) GetCurrentAccount(userToken string) (int, *amsv1.Account, error) {
	if mock.GetCurrentAccountFunc == nil {
		panic("ClientMock.GetCurrentAccountFunc: method is nil but Client.GetCurrentAccount was just called")
	}
	callInfo := struct {
		UserToken string
	}{
		UserToken: userToken,
	}
	mock.lockGetCurrentAccount.Lock()
	mock.calls.GetCurrentAccount = append(mock.calls.GetCurrentAccount, callInfo)
	mock.lockGetCurrentAccount.Unlock()
	return mock.GetCurrentAccountFunc(userToken)
}

// GetCurrentAccountCalls gets all the calls that were made to GetCurrentAccount.
// Check the length with:
//
//	len(mockedClient.GetCurrentAccountCalls())
func (mock *ClientMock) GetCurrentAccountCalls() []struct {
	UserToken string
} {
	var calls []struct {
		UserToken string
	}
	mock.lockGetCurrentAccount.RLock()
	calls = mock.calls.GetCurrentAccount
	mock.lockGetCurrentAccount.RUnlock()
	return calls
}

// GetCustomerCloudAccounts calls GetCustomerCloudAccountsFunc.
func (mock *ClientMock) GetCustomerCloudAccounts(organizationID string, quotaIDs []string) ([]*amsv1.CloudAccount, error) {
	if mock.GetCustomerCloudAccountsFunc == nil {
		panic("ClientMock.GetCustomerCloudAccountsFunc: method is nil but Client.GetCustomerCloudAccounts was just called")
	}
	callInfo := struct {
		OrganizationID string
		QuotaIDs       []string
	}{
		OrganizationID: organizationID,
		QuotaIDs:       quotaIDs,
	}
	mock.lockGetCustomerCloudAccounts.Lock()
	mock.calls.GetCustomerCloudAccounts = append(mock.calls.GetCustomerCloudAccounts, callInfo)
	mock.lockGetCustomerCloudAccounts.Unlock()
	return mock.GetCustomerCloudAccountsFunc(organizationID, quotaIDs)
}

// GetCustomerCloudAccountsCalls gets all the calls that were made to GetCustomerCloudAccounts.
// Check the length with:
//
//	len(mockedClient.GetCustomerCloudAccountsCalls())
func (mock *ClientMock) GetCustomerCloudAccountsCalls() []struct {
	OrganizationID string
	QuotaIDs       []string
} {
	var calls []struct {
		OrganizationID string
		QuotaIDs       []string
	}
	mock.lockGetCustomerCloudAccounts.RLock()
	calls = mock.calls.GetCustomerCloudAccounts
	mock.lockGetCustomerCloudAccounts.RUnlock()
	return calls
}

// GetExistingClusterMetrics calls GetExistingClusterMetricsFunc.
func (mock *ClientMock) GetExistingClusterMetrics(clusterID string) (*amsv1.SubscriptionMetrics, error) {
	if mock.GetExistingClusterMetricsFunc == nil {
		panic("ClientMock.GetExistingClusterMetricsFunc: method is nil but Client.GetExistingClusterMetrics was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetExistingClusterMetrics.Lock()
	mock.calls.GetExistingClusterMetrics = append(mock.calls.GetExistingClusterMetrics, callInfo)
	mock.lockGetExistingClusterMetrics.Unlock()
	return mock.GetExistingClusterMetricsFunc(clusterID)
}

// GetExistingClusterMetricsCalls gets all the calls that were made to GetExistingClusterMetrics.
// Check the length with:
//
//	len(mockedClient.GetExistingClusterMetricsCalls())
func (mock *ClientMock) GetExistingClusterMetricsCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetExistingClusterMetrics.RLock()
	calls = mock.calls.GetExistingClusterMetrics
	mock.lockGetExistingClusterMetrics.RUnlock()
	return calls
}

// GetOrganisationFromExternalID calls GetOrganisationFromExternalIDFunc.
func (mock *ClientMock) GetOrganisationFromExternalID(externalID string) (*amsv1.Organization, error) {
	if mock.GetOrganisationFromExternalIDFunc == nil {
		panic("ClientMock.GetOrganisationFromExternalIDFunc: method is nil but Client.GetOrganisationFromExternalID was just called")
	}
	callInfo := struct {
		ExternalID string
	}{
		ExternalID: externalID,
	}
	mock.lockGetOrganisationFromExternalID.Lock()
	mock.calls.GetOrganisationFromExternalID = append(mock.calls.GetOrganisationFromExternalID, callInfo)
	mock.lockGetOrganisationFromExternalID.Unlock()
	return mock.GetOrganisationFromExternalIDFunc(externalID)
}

// GetOrganisationFromExternalIDCalls gets all the calls that were made to GetOrganisationFromExternalID.
// Check the length with:
//
//	len(mockedClient.GetOrganisationFromExternalIDCalls())
func (mock *ClientMock) GetOrganisationFromExternalIDCalls() []struct {
	ExternalID string
} {
	var calls []struct {
		ExternalID string
	}
	mock.lockGetOrganisationFromExternalID.RLock()
	calls = mock.calls.GetOrganisationFromExternalID
	mock.lockGetOrganisationFromExternalID.RUnlock()
	return calls
}

// GetQuotaCostsForProduct calls GetQuotaCostsForProductFunc.
func (mock *ClientMock) GetQuotaCostsForProduct(organizationID string, resourceName string, product string) ([]*amsv1.QuotaCost, error) {
	if mock.GetQuotaCostsForProductFunc == nil {
		panic("ClientMock.GetQuotaCostsForProductFunc: method is nil but Client.GetQuotaCostsForProduct was just called")
	}
	callInfo := struct {
		OrganizationID string
		ResourceName   string
		Product        string
	}{
		OrganizationID: organizationID,
		ResourceName:   resourceName,
		Product:        product,
	}
	mock.lockGetQuotaCostsForProduct.Lock()
	mock.calls.GetQuotaCostsForProduct = append(mock.calls.GetQuotaCostsForProduct, callInfo)
	mock.lockGetQuotaCostsForProduct.Unlock()
	return mock.GetQuotaCostsForProductFunc(organizationID, resourceName, product)
}

// GetQuotaCostsForProductCalls gets all the calls that were made to GetQuotaCostsForProduct.
// Check the length with:
//
//	len(mockedClient.GetQuotaCostsForProductCalls())
func (mock *ClientMock) GetQuotaCostsForProductCalls() []struct {
	OrganizationID string
	ResourceName   string
	Product        string
} {
	var calls []struct {
		OrganizationID string
		ResourceName   string
		Product        string
	}
	mock.lockGetQuotaCostsForProduct.RLock()
	calls = mock.calls.GetQuotaCostsForProduct
	mock.lockGetQuotaCostsForProduct.RUnlock()
	return calls
}

// GetRegions calls GetRegionsFunc.
func (mock *ClientMock) GetRegions(provider *clustersmgmtv1.CloudProvider) (*clustersmgmtv1.CloudRegionList, error) {
	if mock.GetRegionsFunc == nil {
		panic("ClientMock.GetRegionsFunc: method is nil but Client.GetRegions was just called")
	}
	callInfo := struct {
		Provider *clustersmgmtv1.CloudProvider
	}{
		Provider: provider,
	}
	mock.lockGetRegions.Lock()
	mock.calls.GetRegions = append(mock.calls.GetRegions, callInfo)
	mock.lockGetRegions.Unlock()
	return mock.GetRegionsFunc(provider)
}

// GetRegionsCalls gets all the calls that were made to GetRegions.
// Check the length with:
//
//	len(mockedClient.GetRegionsCalls())
func (mock *ClientMock) GetRegionsCalls() []struct {
	Provider *clustersmgmtv1.CloudProvider
} {
	var calls []struct {
		Provider *clustersmgmtv1.CloudProvider
	}
	mock.lockGetRegions.RLock()
	calls = mock.calls.GetRegions
	mock.lockGetRegions.RUnlock()
	return calls
}

// GetRequiresTermsAcceptance calls GetRequiresTermsAcceptanceFunc.
func (mock *ClientMock) GetRequiresTermsAcceptance(username string) (bool, string, error) {
	if mock.GetRequiresTermsAcceptanceFunc == nil {
		panic("ClientMock.GetRequiresTermsAcceptanceFunc: method is nil but Client.GetRequiresTermsAcceptance was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetRequiresTermsAcceptance.Lock()
	mock.calls.GetRequiresTermsAcceptance = append(mock.calls.GetRequiresTermsAcceptance, callInfo)
	mock.lockGetRequiresTermsAcceptance.Unlock()
	return mock.GetRequiresTermsAcceptanceFunc(username)
}

// GetRequiresTermsAcceptanceCalls gets all the calls that were made to GetRequiresTermsAcceptance.
// Check the length with:
//
//	len(mockedClient.GetRequiresTermsAcceptanceCalls())
func (mock *ClientMock) GetRequiresTermsAcceptanceCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetRequiresTermsAcceptance.RLock()
	calls = mock.calls.GetRequiresTermsAcceptance
	mock.lockGetRequiresTermsAcceptance.RUnlock()
	return calls
}

// UpdateAddonInstallation calls UpdateAddonInstallationFunc.
func (mock *ClientMock) UpdateAddonInstallation(clusterID string, addon *clustersmgmtv1.AddOnInstallation) error {
	if mock.UpdateAddonInstallationFunc == nil {
		panic("ClientMock.UpdateAddonInstallationFunc: method is nil but Client.UpdateAddonInstallation was just called")
	}
	callInfo := struct {
		ClusterID string
		Addon     *clustersmgmtv1.AddOnInstallation
	}{
		ClusterID: clusterID,
		Addon:     addon,
	}
	mock.lockUpdateAddonInstallation.Lock()
	mock.calls.UpdateAddonInstallation = append(mock.calls.UpdateAddonInstallation, callInfo)
	mock.lockUpdateAddonInstallation.Unlock()
	return mock.UpdateAddonInstallationFunc(clusterID, addon)
}

// UpdateAddonInstallationCalls gets all the calls that were made to UpdateAddonInstallation.
// Check the length with:
//
//	len(mockedClient.UpdateAddonInstallationCalls())
func (mock *ClientMock) UpdateAddonInstallationCalls() []struct {
	ClusterID string
	Addon     *clustersmgmtv1.AddOnInstallation
} {
	var calls []struct {
		ClusterID string
		Addon     *clustersmgmtv1.AddOnInstallation
	}
	mock.lockUpdateAddonInstallation.RLock()
	calls = mock.calls.UpdateAddonInstallation
	mock.lockUpdateAddonInstallation.RUnlock()
	return calls
}
