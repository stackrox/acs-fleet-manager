// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fleetmanager

import (
	"context"
	"github.com/stackrox/acs-fleet-manager/internal/dinosaur/pkg/api/public"
	"net/http"
	"sync"
)

// Ensure, that PublicClientMock does implement PublicClient.
// If this is not the case, regenerate this file with moq.
var _ PublicClient = &PublicClientMock{}

// PublicClientMock is a mock implementation of PublicClient.
//
// 	func TestSomethingThatUsesPublicClient(t *testing.T) {
//
// 		// make and configure a mocked PublicClient
// 		mockedPublicClient := &PublicClientMock{
// 			CreateCentralFunc: func(ctx context.Context, async bool, request public.CentralRequestPayload) (public.CentralRequest, *http.Response, error) {
// 				panic("mock out the CreateCentral method")
// 			},
// 			DeleteCentralByIdFunc: func(ctx context.Context, id string, async bool) (*http.Response, error) {
// 				panic("mock out the DeleteCentralById method")
// 			},
// 			GetCentralByIdFunc: func(ctx context.Context, id string) (public.CentralRequest, *http.Response, error) {
// 				panic("mock out the GetCentralById method")
// 			},
// 			GetCentralsFunc: func(ctx context.Context, localVarOptionals *public.GetCentralsOpts) (public.CentralRequestList, *http.Response, error) {
// 				panic("mock out the GetCentrals method")
// 			},
// 		}
//
// 		// use mockedPublicClient in code that requires PublicClient
// 		// and then make assertions.
//
// 	}
type PublicClientMock struct {
	// CreateCentralFunc mocks the CreateCentral method.
	CreateCentralFunc func(ctx context.Context, async bool, request public.CentralRequestPayload) (public.CentralRequest, *http.Response, error)

	// DeleteCentralByIdFunc mocks the DeleteCentralById method.
	DeleteCentralByIdFunc func(ctx context.Context, id string, async bool) (*http.Response, error)

	// GetCentralByIdFunc mocks the GetCentralById method.
	GetCentralByIdFunc func(ctx context.Context, id string) (public.CentralRequest, *http.Response, error)

	// GetCentralsFunc mocks the GetCentrals method.
	GetCentralsFunc func(ctx context.Context, localVarOptionals *public.GetCentralsOpts) (public.CentralRequestList, *http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCentral holds details about calls to the CreateCentral method.
		CreateCentral []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Async is the async argument value.
			Async bool
			// Request is the request argument value.
			Request public.CentralRequestPayload
		}
		// DeleteCentralById holds details about calls to the DeleteCentralById method.
		DeleteCentralById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Async is the async argument value.
			Async bool
		}
		// GetCentralById holds details about calls to the GetCentralById method.
		GetCentralById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetCentrals holds details about calls to the GetCentrals method.
		GetCentrals []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LocalVarOptionals is the localVarOptionals argument value.
			LocalVarOptionals *public.GetCentralsOpts
		}
	}
	lockCreateCentral     sync.RWMutex
	lockDeleteCentralById sync.RWMutex
	lockGetCentralById    sync.RWMutex
	lockGetCentrals       sync.RWMutex
}

// CreateCentral calls CreateCentralFunc.
func (mock *PublicClientMock) CreateCentral(ctx context.Context, async bool, request public.CentralRequestPayload) (public.CentralRequest, *http.Response, error) {
	if mock.CreateCentralFunc == nil {
		panic("PublicClientMock.CreateCentralFunc: method is nil but PublicClient.CreateCentral was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Async   bool
		Request public.CentralRequestPayload
	}{
		Ctx:     ctx,
		Async:   async,
		Request: request,
	}
	mock.lockCreateCentral.Lock()
	mock.calls.CreateCentral = append(mock.calls.CreateCentral, callInfo)
	mock.lockCreateCentral.Unlock()
	return mock.CreateCentralFunc(ctx, async, request)
}

// CreateCentralCalls gets all the calls that were made to CreateCentral.
// Check the length with:
//     len(mockedPublicClient.CreateCentralCalls())
func (mock *PublicClientMock) CreateCentralCalls() []struct {
	Ctx     context.Context
	Async   bool
	Request public.CentralRequestPayload
} {
	var calls []struct {
		Ctx     context.Context
		Async   bool
		Request public.CentralRequestPayload
	}
	mock.lockCreateCentral.RLock()
	calls = mock.calls.CreateCentral
	mock.lockCreateCentral.RUnlock()
	return calls
}

// DeleteCentralById calls DeleteCentralByIdFunc.
func (mock *PublicClientMock) DeleteCentralById(ctx context.Context, id string, async bool) (*http.Response, error) {
	if mock.DeleteCentralByIdFunc == nil {
		panic("PublicClientMock.DeleteCentralByIdFunc: method is nil but PublicClient.DeleteCentralById was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Async bool
	}{
		Ctx:   ctx,
		ID:    id,
		Async: async,
	}
	mock.lockDeleteCentralById.Lock()
	mock.calls.DeleteCentralById = append(mock.calls.DeleteCentralById, callInfo)
	mock.lockDeleteCentralById.Unlock()
	return mock.DeleteCentralByIdFunc(ctx, id, async)
}

// DeleteCentralByIdCalls gets all the calls that were made to DeleteCentralById.
// Check the length with:
//     len(mockedPublicClient.DeleteCentralByIdCalls())
func (mock *PublicClientMock) DeleteCentralByIdCalls() []struct {
	Ctx   context.Context
	ID    string
	Async bool
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Async bool
	}
	mock.lockDeleteCentralById.RLock()
	calls = mock.calls.DeleteCentralById
	mock.lockDeleteCentralById.RUnlock()
	return calls
}

// GetCentralById calls GetCentralByIdFunc.
func (mock *PublicClientMock) GetCentralById(ctx context.Context, id string) (public.CentralRequest, *http.Response, error) {
	if mock.GetCentralByIdFunc == nil {
		panic("PublicClientMock.GetCentralByIdFunc: method is nil but PublicClient.GetCentralById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetCentralById.Lock()
	mock.calls.GetCentralById = append(mock.calls.GetCentralById, callInfo)
	mock.lockGetCentralById.Unlock()
	return mock.GetCentralByIdFunc(ctx, id)
}

// GetCentralByIdCalls gets all the calls that were made to GetCentralById.
// Check the length with:
//     len(mockedPublicClient.GetCentralByIdCalls())
func (mock *PublicClientMock) GetCentralByIdCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetCentralById.RLock()
	calls = mock.calls.GetCentralById
	mock.lockGetCentralById.RUnlock()
	return calls
}

// GetCentrals calls GetCentralsFunc.
func (mock *PublicClientMock) GetCentrals(ctx context.Context, localVarOptionals *public.GetCentralsOpts) (public.CentralRequestList, *http.Response, error) {
	if mock.GetCentralsFunc == nil {
		panic("PublicClientMock.GetCentralsFunc: method is nil but PublicClient.GetCentrals was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		LocalVarOptionals *public.GetCentralsOpts
	}{
		Ctx:               ctx,
		LocalVarOptionals: localVarOptionals,
	}
	mock.lockGetCentrals.Lock()
	mock.calls.GetCentrals = append(mock.calls.GetCentrals, callInfo)
	mock.lockGetCentrals.Unlock()
	return mock.GetCentralsFunc(ctx, localVarOptionals)
}

// GetCentralsCalls gets all the calls that were made to GetCentrals.
// Check the length with:
//     len(mockedPublicClient.GetCentralsCalls())
func (mock *PublicClientMock) GetCentralsCalls() []struct {
	Ctx               context.Context
	LocalVarOptionals *public.GetCentralsOpts
} {
	var calls []struct {
		Ctx               context.Context
		LocalVarOptionals *public.GetCentralsOpts
	}
	mock.lockGetCentrals.RLock()
	calls = mock.calls.GetCentrals
	mock.lockGetCentrals.RUnlock()
	return calls
}
