// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package telemetry

import (
	"github.com/spf13/pflag"
	"github.com/stackrox/rox/pkg/telemetry/phonehome"
	"sync"
)

// Ensure, that TelemetryConfigMock does implement TelemetryConfig.
// If this is not the case, regenerate this file with moq.
var _ TelemetryConfig = &TelemetryConfigMock{}

// TelemetryConfigMock is a mock implementation of TelemetryConfig.
//
//	func TestSomethingThatUsesTelemetryConfig(t *testing.T) {
//
//		// make and configure a mocked TelemetryConfig
//		mockedTelemetryConfig := &TelemetryConfigMock{
//			AddFlagsFunc: func(fs *pflag.FlagSet)  {
//				panic("mock out the AddFlags method")
//			},
//			EnabledFunc: func() bool {
//				panic("mock out the Enabled method")
//			},
//			ReadFilesFunc: func() error {
//				panic("mock out the ReadFiles method")
//			},
//			TelemeterFunc: func() phonehome.Telemeter {
//				panic("mock out the Telemeter method")
//			},
//		}
//
//		// use mockedTelemetryConfig in code that requires TelemetryConfig
//		// and then make assertions.
//
//	}
type TelemetryConfigMock struct {
	// AddFlagsFunc mocks the AddFlags method.
	AddFlagsFunc func(fs *pflag.FlagSet)

	// EnabledFunc mocks the Enabled method.
	EnabledFunc func() bool

	// ReadFilesFunc mocks the ReadFiles method.
	ReadFilesFunc func() error

	// TelemeterFunc mocks the Telemeter method.
	TelemeterFunc func() phonehome.Telemeter

	// calls tracks calls to the methods.
	calls struct {
		// AddFlags holds details about calls to the AddFlags method.
		AddFlags []struct {
			// Fs is the fs argument value.
			Fs *pflag.FlagSet
		}
		// Enabled holds details about calls to the Enabled method.
		Enabled []struct {
		}
		// ReadFiles holds details about calls to the ReadFiles method.
		ReadFiles []struct {
		}
		// Telemeter holds details about calls to the Telemeter method.
		Telemeter []struct {
		}
	}
	lockAddFlags  sync.RWMutex
	lockEnabled   sync.RWMutex
	lockReadFiles sync.RWMutex
	lockTelemeter sync.RWMutex
}

// AddFlags calls AddFlagsFunc.
func (mock *TelemetryConfigMock) AddFlags(fs *pflag.FlagSet) {
	if mock.AddFlagsFunc == nil {
		panic("TelemetryConfigMock.AddFlagsFunc: method is nil but TelemetryConfig.AddFlags was just called")
	}
	callInfo := struct {
		Fs *pflag.FlagSet
	}{
		Fs: fs,
	}
	mock.lockAddFlags.Lock()
	mock.calls.AddFlags = append(mock.calls.AddFlags, callInfo)
	mock.lockAddFlags.Unlock()
	mock.AddFlagsFunc(fs)
}

// AddFlagsCalls gets all the calls that were made to AddFlags.
// Check the length with:
//
//	len(mockedTelemetryConfig.AddFlagsCalls())
func (mock *TelemetryConfigMock) AddFlagsCalls() []struct {
	Fs *pflag.FlagSet
} {
	var calls []struct {
		Fs *pflag.FlagSet
	}
	mock.lockAddFlags.RLock()
	calls = mock.calls.AddFlags
	mock.lockAddFlags.RUnlock()
	return calls
}

// Enabled calls EnabledFunc.
func (mock *TelemetryConfigMock) Enabled() bool {
	if mock.EnabledFunc == nil {
		panic("TelemetryConfigMock.EnabledFunc: method is nil but TelemetryConfig.Enabled was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEnabled.Lock()
	mock.calls.Enabled = append(mock.calls.Enabled, callInfo)
	mock.lockEnabled.Unlock()
	return mock.EnabledFunc()
}

// EnabledCalls gets all the calls that were made to Enabled.
// Check the length with:
//
//	len(mockedTelemetryConfig.EnabledCalls())
func (mock *TelemetryConfigMock) EnabledCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEnabled.RLock()
	calls = mock.calls.Enabled
	mock.lockEnabled.RUnlock()
	return calls
}

// ReadFiles calls ReadFilesFunc.
func (mock *TelemetryConfigMock) ReadFiles() error {
	if mock.ReadFilesFunc == nil {
		panic("TelemetryConfigMock.ReadFilesFunc: method is nil but TelemetryConfig.ReadFiles was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadFiles.Lock()
	mock.calls.ReadFiles = append(mock.calls.ReadFiles, callInfo)
	mock.lockReadFiles.Unlock()
	return mock.ReadFilesFunc()
}

// ReadFilesCalls gets all the calls that were made to ReadFiles.
// Check the length with:
//
//	len(mockedTelemetryConfig.ReadFilesCalls())
func (mock *TelemetryConfigMock) ReadFilesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadFiles.RLock()
	calls = mock.calls.ReadFiles
	mock.lockReadFiles.RUnlock()
	return calls
}

// Telemeter calls TelemeterFunc.
func (mock *TelemetryConfigMock) Telemeter() phonehome.Telemeter {
	if mock.TelemeterFunc == nil {
		panic("TelemetryConfigMock.TelemeterFunc: method is nil but TelemetryConfig.Telemeter was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTelemeter.Lock()
	mock.calls.Telemeter = append(mock.calls.Telemeter, callInfo)
	mock.lockTelemeter.Unlock()
	return mock.TelemeterFunc()
}

// TelemeterCalls gets all the calls that were made to Telemeter.
// Check the length with:
//
//	len(mockedTelemetryConfig.TelemeterCalls())
func (mock *TelemetryConfigMock) TelemeterCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTelemeter.RLock()
	calls = mock.calls.Telemeter
	mock.lockTelemeter.RUnlock()
	return calls
}
