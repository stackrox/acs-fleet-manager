# Default values for rhacs-terraform.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

fleetshardSync:
  image: "quay.io/app-sre/acs-fleet-manager:59142fe"
  # Can be either OCM, RHSSO, STATIC_TOKEN. When choosing RHSSO, make sure the clientId/secret is set. By default, uses RHSSO.
  authType: "RHSSO"
  # OCM refresh token, only required in combination with authType=OCM.
  ocmToken: ""
  fleetManagerEndpoint: ""
  clusterId: ""
  clusterName: ""
  environment: ""
  # Flag controlling whether tenant's sso.redhat.com auth provider will be initialised by fleetshard-sync.
  # Currently this functionality is supported only when fleetshard-sync is deployed in the same k8s cluster as tenant.
  createAuthProvider: true
  # Static token, only required in combination with authType=STATIC_TOKEN. A sample static token can be found
  # within Bitwarden (ACS Fleet* static token).
  staticToken: ""
  # Red Hat SSO secrets, only required in combination with authType=RHSSO. The client credentials can be found within
  # Bitwarden (ACS RH SSO Fleet* serviceaccount).
  redHatSSO:
    clientId: ""
    clientSecret: ""
    endpoint: "https://sso.redhat.com"
    realm: "redhat-external"
  egressProxy:
    image: "registry.redhat.io/openshift4/ose-egress-http-proxy:v4.11.0"
  managedDB:
    enabled: true
    subnetGroup: ""
    securityGroup: ""
    performanceInsights: true
  aws:
    region: "us-east-1" # TODO(2023-05-01): Remove the default value here as we now set it explicitly
    roleARN: ""
    enableTokenAuth: true
    accessKeyId: ""
    secretAccessKey: ""
  telemetry:
    storage:
      endpoint: ""
      # API key to push telemetry data to a remote backend. Leaving it empty disables telemetry.
      key: ""
  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  imageCredentials:
    registry: quay.io
    username: ""
    password: ""
    email: "quayuser@example.com"

acsOperator:
  enabled: false
  channel: latest
  source: redhat-operators
  sourceNamespace: openshift-marketplace
  version: v3.70.0
  # This setting specifies whether to use a upstream operator to test unreleased versions of ACS.
  upstream: false

# See available parameters in charts/cloudwatch/values.yaml
# - enabled flag is used to completely enable/disable cloudwatch sub-chart
cloudwatch:
  enabled: true
  aws:
    accessKeyId: ""
    secretAccessKey: ""
  clusterName: ""
  environment: ""

# See available parameters in charts/observability/values.yaml
# - enabled flag is used to completely enable/disable observability sub-chart
observability:
  enabled: true
  clusterName: ""
  github:
    accessToken: ""
    repository: ""
  observatorium:
    gateway: ""
    metricsClientId: ""
    metricsSecret: ""
  pagerduty:
    key: ""
  deadMansSwitch:
    url: ""

# See available parameters in charts/logging/values.yaml
# - enabled flag is used to completely enable/disable logging sub-chart
logging:
  enabled: true
  groupPrefix: ""
  aws:
    accessKeyId: ""
    secretAccessKey: ""

# See available parameters in charts/audit-logs/values.yaml
# - enabled flag is used to completely enable/disable logging sub-chart
audit-logs:
  enabled: true
  image: 'registry.redhat.io/openshift-logging/vector-rhel8:v0.21'
  annotations: {}
  replicas: 3
  persistence:
    enabled: true
    storageClassName: ""
    size: 1Gi
  customConfig:
    data_dir: /aggregator-data-dir
    sources:
      http_server:
        type: "http"
        address: "0.0.0.0:8888"
        decoding:
          codec: "json"
        tls:
          enabled: true
          ca_file: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
          crt_file: "/etc/aggregator/tls/tls.crt"
          key_file: "/etc/aggregator/tls/tls.key"
    sinks:
      aws_cloudwatch_logs:
        type: "aws_cloudwatch_logs"
        region: ""
        group_name: "acs_audit_logs"
        create_missing_group: false
        create_missing_stream: true
        inputs: ["http_server"]
        stream_name: '{{ "{{" }} .tenant_id {{ "}}" }}'
        compression: none
        healthcheck:
          enabled: true
        batch:
          timeout_secs: 60
          # 4.5M Bytes
          max_size: 4718592
        buffer:
          type: disk
          # 900M Bytes (disk is 1Gi)
          max_size: 943718400
          when_full: block
        encoding:
          codec: "json"
  secrets:
    aws_region: ""
    aws_role_arn: ""

secured-cluster:
  enabled: true
  pullSecret: ""
  clusterName: ""
  centralEndpoint: ""
  admissionControl:
    serviceTLS:
      cert: ""
      key: ""
  ca:
    cert: ""
  collector:
    serviceTLS:
      cert: ""
      key: ""
  sensor:
    serviceTLS:
      cert: ""
      key: ""
